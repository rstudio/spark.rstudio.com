{
  "hash": "5c48aa7663549cc1d79325f50610cc70",
  "result": {
    "markdown": "---\ntitle: \"Spark ML -- Decision Trees\"\nexecute:\n  freeze: true\n---\n\n\n*R/ml_classification_decision_tree_classifier.R,*\n\n## ml_decision_tree_classifier\n\n## Description\nPerform classification and regression using decision trees. \n\n\n## Usage\n```r\nml_decision_tree_classifier( \n  x, \n  formula = NULL, \n  max_depth = 5, \n  max_bins = 32, \n  min_instances_per_node = 1, \n  min_info_gain = 0, \n  impurity = \"gini\", \n  seed = NULL, \n  thresholds = NULL, \n  cache_node_ids = FALSE, \n  checkpoint_interval = 10, \n  max_memory_in_mb = 256, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  probability_col = \"probability\", \n  raw_prediction_col = \"rawPrediction\", \n  uid = random_string(\"decision_tree_classifier_\"), \n  ... \n) \n\nml_decision_tree( \n  x, \n  formula = NULL, \n  type = c(\"auto\", \"regression\", \"classification\"), \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  variance_col = NULL, \n  probability_col = \"probability\", \n  raw_prediction_col = \"rawPrediction\", \n  checkpoint_interval = 10L, \n  impurity = \"auto\", \n  max_bins = 32L, \n  max_depth = 5L, \n  min_info_gain = 0, \n  min_instances_per_node = 1L, \n  seed = NULL, \n  thresholds = NULL, \n  cache_node_ids = FALSE, \n  max_memory_in_mb = 256L, \n  uid = random_string(\"decision_tree_\"), \n  response = NULL, \n  features = NULL, \n  ... \n) \n\nml_decision_tree_regressor( \n  x, \n  formula = NULL, \n  max_depth = 5, \n  max_bins = 32, \n  min_instances_per_node = 1, \n  min_info_gain = 0, \n  impurity = \"variance\", \n  seed = NULL, \n  cache_node_ids = FALSE, \n  checkpoint_interval = 10, \n  max_memory_in_mb = 256, \n  variance_col = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  uid = random_string(\"decision_tree_regressor_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| max_depth | Maximum depth of the tree (>= 0); that is, the maximum number of nodes separating any leaves from the root of the tree. |\n| max_bins | The maximum number of bins used for discretizing continuous features and for choosing how to split on features at each node. More bins give higher granularity. |\n| min_instances_per_node | Minimum number of instances each child must have after split. |\n| min_info_gain | Minimum information gain for a split to be considered at a tree node. Should be >= 0, defaults to 0. |\n| impurity | Criterion used for information gain calculation. Supported: \"entropy\" and \"gini\" (default) for classification and \"variance\" (default) for regression. For `ml_decision_tree`, setting `\"auto\"` will default to the appropriate criterion based on model type. |\n| seed | Seed for random numbers. |\n| thresholds | Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value `p/t` is predicted, where `p` is the original probability of that class and `t` is the class's threshold. |\n| cache_node_ids | If `FALSE`, the algorithm will pass trees to executors to match instances with nodes. If `TRUE`, the algorithm will cache node IDs for each instance. Caching can speed up training of deeper trees. Defaults to `FALSE`. |\n| checkpoint_interval | Set checkpoint interval (>= 1) or disable checkpoint (-1). E.g. 10 means that the cache will get checkpointed every 10 iterations, defaults to 10. |\n| max_memory_in_mb | Maximum memory in MB allocated to histogram aggregation. If too small, then 1 node will be split per iteration, and its aggregates may exceed this size. Defaults to 256. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| probability_col | Column name for predicted class conditional probabilities. |\n| raw_prediction_col | Raw prediction (a.k.a. confidence) column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n| type | The type of model to fit. `\"regression\"` treats the response as a continuous variable, while `\"classification\"` treats the response as a categorical variable. When `\"auto\"` is used, the model type is inferred based on the response variable type -- if it is a numeric type, then regression is used; classification otherwise. |\n| variance_col | (Optional) Column name for the biased sample variance of prediction. |\n| response | (Deprecated) The name of the response column (as a length-one character vector.) |\n| features | (Deprecated) The name of features (terms) to use for the model fit. |\n\n## Details\n\nWhen `x` is a `tbl_spark` and `formula` (alternatively, `response` and `features`) is specified, the function returns a `ml_model` object wrapping a `ml_pipeline_model` which contains data pre-processing transformers, the ML predictor, and, for classification models, a post-processing transformer that converts predictions into class labels. For classification, an optional argument `predicted_label_col` (defaults to `\"predicted_label\"`) can be used to specify the name of the predicted label column. In addition to the fitted `ml_pipeline_model`, `ml_model` objects also contain a `ml_pipeline` object where the ML predictor stage is an estimator ready to be fit against data. This is utilized by `ml_save` with `type = \"pipeline\"` to faciliate model refresh workflows. \n\n`ml_decision_tree` is a wrapper around `ml_decision_tree_regressor.tbl_spark` and `ml_decision_tree_classifier.tbl_spark` and calls the appropriate method based on model type. \n\n\n## Value\n\nThe object returned depends on the class of `x`. \n\n  \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns an instance of a `ml_estimator` object. The object contains a pointer to   a Spark `Predictor` object and can be used to compose   `Pipeline` objects. \n\n  \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the predictor appended to the pipeline. \n\n  \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a predictor is constructed then   immediately fit with the input `tbl_spark`, returning a prediction model. \n\n  \n\n- `tbl_spark`, with `formula`: specified When `formula`\n\n    is specified, the input `tbl_spark` is first transformed using a     `RFormula` transformer before being fit by     the predictor. The object returned in this case is a `ml_model` which is a     wrapper of a `ml_pipeline_model`. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \npartitions <- iris_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \niris_training <- partitions$training \niris_test <- partitions$test \ndt_model <- iris_training %>% \n  ml_decision_tree(Species ~ .) \npred <- ml_predict(dt_model, iris_test) \nml_multiclass_classification_evaluator(pred) \n```\n:::\n\n\n## See Also\n\nSee [https://spark.apache.org/docs/latest/ml-classification-regression.html](https://spark.apache.org/docs/latest/ml-classification-regression.html) for   more information on the set of supervised learning algorithms. \n\nOther ml algorithms:  `ml_aft_survival_regression()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_naive_bayes()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}