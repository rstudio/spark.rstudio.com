{
  "hash": "b83a7df13aa5bb9039c0ef670b8929cd",
  "result": {
    "markdown": "---\ntitle: \"Render Stream\"\nexecute:\n  freeze: true\n---\n\n\n*R/stream_view.R*\n\n## stream_render\n\n## Description\nCollects streaming statistics to render the stream as an 'htmlwidget'. \n\n\n## Usage\n```r\nstream_render(stream = NULL, collect = 10, stats = NULL, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| stream | The stream to render |\n| collect | The interval in seconds to collect data before rendering the 'htmlwidget'. |\n| stats | Optional stream statistics collected using `stream_stats()`, when specified, `stream` should be omitted. |\n| ... | Additional optional arguments. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr) \nsc <- spark_connect(master = \"local\") \ndir.create(\"iris-in\") \nwrite.csv(iris, \"iris-in/iris.csv\", row.names = FALSE) \nstream <- stream_read_csv(sc, \"iris-in/\") %>% \n  stream_write_csv(\"iris-out/\") \nstream_render(stream) \nstream_stop(stream) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}