{
  "hash": "d05dbc64062d2f0f80d358623afea929",
  "result": {
    "markdown": "---\ntitle: \"Text modeling\"\nexecute:\n  eval: false\n  freeze: true\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n\nsc <- spark_connect(master = \"local\", version = \"3.3\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modeldata)\n\ndata(\"small_fine_foods\")\n\nsff_training_data <- copy_to(sc, training_data)\n\nsff_testing_data <- copy_to(sc, testing_data)\n```\n:::\n\n\n## Text transformers\n\n[Text Mining](textmining.qmd)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsff_training_data %>% \n  ft_tokenizer(\n    input_col = \"review\",\n    output_col = \"word_list\"\n  ) %>% \n  select(3:4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsff_training_data %>% \n  ft_tokenizer(\n    input_col = \"review\",\n    output_col = \"word_list\"\n  ) %>% \n  ft_stop_words_remover(\n    input_col = \"word_list\", \n    output_col = \"wo_stop_words\"\n    ) %>% \n  select(3:5) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsff_training_data %>% \n  ft_tokenizer(\n    input_col = \"review\",\n    output_col = \"word_list\"\n  ) %>% \n  ft_stop_words_remover(\n    input_col = \"word_list\", \n    output_col = \"wo_stop_words\"\n    ) %>% \n  ft_hashing_tf(\n    input_col = \"wo_stop_words\", \n    output_col = \"hashed_features\", \n    binary = TRUE, \n    num_features = 1024\n    ) %>%\n  select(3:6) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsff_training_data %>% \n  ft_tokenizer(\n    input_col = \"review\",\n    output_col = \"word_list\"\n  ) %>% \n  ft_stop_words_remover(\n    input_col = \"word_list\", \n    output_col = \"wo_stop_words\"\n    ) %>% \n  ft_hashing_tf(\n    input_col = \"wo_stop_words\", \n    output_col = \"hashed_features\", \n    binary = TRUE, \n    num_features = 1024\n    ) %>%\n  ft_normalizer(\n    input_col = \"hashed_features\", \n    output_col = \"normal_features\"\n    ) %>% \n  select(3:7) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsff_pipeline <- ml_pipeline(sc) %>% \n  ft_tokenizer(\n    input_col = \"review\",\n    output_col = \"word_list\"\n  ) %>% \n  ft_stop_words_remover(\n    input_col = \"word_list\", \n    output_col = \"wo_stop_words\"\n    ) %>% \n  ft_hashing_tf(\n    input_col = \"wo_stop_words\", \n    output_col = \"hashed_features\", \n    binary = TRUE, \n    num_features = 1024\n    ) %>%\n  ft_normalizer(\n    input_col = \"hashed_features\", \n    output_col = \"normal_features\"\n    ) %>% \n  ft_r_formula(score ~ normal_features) %>% \n  ml_logistic_regression()  \n\nsff_pipeline\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsff_pipeline_model <- ml_fit(sff_pipeline, sff_training_data)\n\nsff_pipeline_model\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsff_test_predictions <- sff_pipeline_model %>% \n  ml_transform(sff_testing_data) \n\nglimpse(sff_test_predictions)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nml_metrics_binary(sff_test_predictions)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspark_disconnect(sc)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}