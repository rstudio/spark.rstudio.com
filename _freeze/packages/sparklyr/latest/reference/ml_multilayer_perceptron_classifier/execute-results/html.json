{
  "hash": "f5f0aa6d52d7dc383ebb14c76a174bb0",
  "result": {
    "markdown": "---\ntitle: \"Spark ML -- Multilayer Perceptron\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*NULL*\n\n## ml_multilayer_perceptron_classifier\n\n## Description\n Classification model based on the Multilayer Perceptron. Each layer has sigmoid activation function, output layer has softmax. \n\n\n## Usage\n```r\n \nml_multilayer_perceptron_classifier( \n  x, \n  formula = NULL, \n  layers = NULL, \n  max_iter = 100, \n  step_size = 0.03, \n  tol = 1e-06, \n  block_size = 128, \n  solver = \"l-bfgs\", \n  seed = NULL, \n  initial_weights = NULL, \n  thresholds = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  probability_col = \"probability\", \n  raw_prediction_col = \"rawPrediction\", \n  uid = random_string(\"multilayer_perceptron_classifier_\"), \n  ... \n) \n \nml_multilayer_perceptron( \n  x, \n  formula = NULL, \n  layers, \n  max_iter = 100, \n  step_size = 0.03, \n  tol = 1e-06, \n  block_size = 128, \n  solver = \"l-bfgs\", \n  seed = NULL, \n  initial_weights = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  thresholds = NULL, \n  prediction_col = \"prediction\", \n  probability_col = \"probability\", \n  raw_prediction_col = \"rawPrediction\", \n  uid = random_string(\"multilayer_perceptron_classifier_\"), \n  response = NULL, \n  features = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| layers | A numeric vector describing the layers -- each element in the vector gives the size of a layer. For example, `c(4, 5, 2)` would imply three layers, with an input (feature) layer of size 4, an intermediate layer of size 5, and an output (class) layer of size 2. |\n| max_iter | The maximum number of iterations to use. |\n| step_size | Step size to be used for each iteration of optimization (> 0). |\n| tol | Param for the convergence tolerance for iterative algorithms. |\n| block_size | Block size for stacking input data in matrices to speed up the computation. Data is stacked within partitions. If block size is more than remaining data in a partition then it is adjusted to the size of this data. Recommended size is between 10 and 1000. Default: 128 |\n| solver | The solver algorithm for optimization. Supported options: \"gd\" (minibatch gradient descent) or \"l-bfgs\". Default: \"l-bfgs\" |\n| seed | A random seed. Set this value if you need your results to be reproducible across repeated calls. |\n| initial_weights | The initial weights of the model. |\n| thresholds | Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value `p/t` is predicted, where `p` is the original probability of that class and `t` is the class's threshold. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| probability_col | Column name for predicted class conditional probabilities. |\n| raw_prediction_col | Raw prediction (a.k.a. confidence) column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n| response | (Deprecated) The name of the response column (as a length-one character vector.) |\n| features | (Deprecated) The name of features (terms) to use for the model fit. |\n\n## Details\n When `x` is a `tbl_spark` and `formula` (alternatively, `response` and `features`) is specified, the function returns a `ml_model` object wrapping a `ml_pipeline_model` which contains data pre-processing transformers, the ML predictor, and, for classification models, a post-processing transformer that converts predictions into class labels. For classification, an optional argument `predicted_label_col` (defaults to `\"predicted_label\"`) can be used to specify the name of the predicted label column. In addition to the fitted `ml_pipeline_model`, `ml_model` objects also contain a `ml_pipeline` object where the ML predictor stage is an estimator ready to be fit against data. This is utilized by `ml_save` with `type = \"pipeline\"` to faciliate model refresh workflows.  `ml_multilayer_perceptron()` is an alias for `ml_multilayer_perceptron_classifier()` for backwards compatibility. \n\n\n## Value\n\n The object returned depends on the class of `x`.     \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns an instance of a `ml_estimator` object. The object contains a pointer to   a Spark `Predictor` object and can be used to compose   `Pipeline` objects.    \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the predictor appended to the pipeline.    \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a predictor is constructed then   immediately fit with the input `tbl_spark`, returning a prediction model.    \n\n- `tbl_spark`, with `formula`: specified When `formula`     is specified, the input `tbl_spark` is first transformed using a     `RFormula` transformer before being fit by     the predictor. The object returned in this case is a `ml_model` which is a     wrapper of a `ml_pipeline_model`. \n\n \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nsc <- spark_connect(master = \"local\") \n \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \npartitions <- iris_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \n \niris_training <- partitions$training \niris_test <- partitions$test \n \nmlp_model <- iris_training %>% \n  ml_multilayer_perceptron_classifier(Species ~ ., layers = c(4, 3, 3)) \n \npred <- ml_predict(mlp_model, iris_test) \n \nml_multiclass_classification_evaluator(pred) \n#> [1] 0.5227273\n```\n:::\n\n\n## See Also\n See [https://spark.apache.org/docs/latest/ml-classification-regression.html](https://spark.apache.org/docs/latest/ml-classification-regression.html) for   more information on the set of supervised learning algorithms.  Other ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_naive_bayes()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()` \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}