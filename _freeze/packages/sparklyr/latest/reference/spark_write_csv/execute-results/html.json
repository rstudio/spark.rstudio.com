{
  "hash": "4cdfb5ed9f1e419f457b4903f1e9171f",
  "result": {
    "markdown": "---\ntitle: \"Write a Spark DataFrame to a CSV\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/data_interface.R*\n\n## spark_write_csv\n\n## Description\nWrite a Spark DataFrame to a tabular (typically, comma-separated) file. \n\n\n## Usage\n```r\nspark_write_csv( \n  x, \n  path, \n  header = TRUE, \n  delimiter = \",\", \n  quote = \"\\\"\", \n  escape = \"\\\\\", \n  charset = \"UTF-8\", \n  null_value = NULL, \n  options = list(), \n  mode = NULL, \n  partition_by = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A Spark DataFrame or dplyr operation |\n| path | The path to the file. Needs to be accessible from the cluster. Supports the `\"hdfs://\"`, `\"s3a://\"` and `\"file://\"` protocols. |\n| header | Should the first row of data be used as a header? Defaults to `TRUE`. |\n| delimiter | The character used to delimit each column, defaults to `,`. |\n| quote | The character used as a quote. Defaults to `'\"'`. |\n| escape | The character used to escape other characters, defaults to `\\`. |\n| charset | The character set, defaults to `\"UTF-8\"`. |\n| null_value | The character to use for default values, defaults to `NULL`. |\n| options | A list of strings with additional options. |\n| mode | A `character` element. Specifies the behavior when data or   table already exists. Supported values include: 'error', 'append', 'overwrite' and   ignore. Notice that 'overwrite' will also change the column structure. <br>  For more details see also [https://spark.apache.org/docs/latest/sql-programming-guide.html#save-modes](https://spark.apache.org/docs/latest/sql-programming-guide.html#save-modes)<br>  for your version of Spark. |\n| partition_by | A `character` vector. Partitions the output by the given columns on the file system. |\n| ... | Optional arguments; currently unused. |\n\n\n\n\n\n\n## See Also\nOther Spark serialization routines:  `collect_from_rds()`, `spark_insert_table()`, `spark_load_table()`, `spark_read_avro()`, `spark_read_binary()`, `spark_read_csv()`, `spark_read_delta()`, `spark_read_image()`, `spark_read_jdbc()`, `spark_read_json()`, `spark_read_libsvm()`, `spark_read_orc()`, `spark_read_parquet()`, `spark_read_source()`, `spark_read_table()`, `spark_read_text()`, `spark_read()`, `spark_save_table()`, `spark_write_avro()`, `spark_write_delta()`, `spark_write_jdbc()`, `spark_write_json()`, `spark_write_orc()`, `spark_write_parquet()`, `spark_write_source()`, `spark_write_table()`, `spark_write_text()`\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}