{
  "hash": "7e4cef6c65476f4f2e34d4ee101e99fb",
  "result": {
    "markdown": "---\ntitle: \"Read a ORC file into a Spark DataFrame\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/data_interface.R*\n\n## spark_read_orc\n\n## Description\nRead a [ORC](https://orc.apache.org/) file into a Spark DataFrame. \n\n\n## Usage\n```r\nspark_read_orc( \n  sc, \n  name = NULL, \n  path = name, \n  options = list(), \n  repartition = 0, \n  memory = TRUE, \n  overwrite = TRUE, \n  columns = NULL, \n  schema = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| sc | A `spark_connection`. |\n| name | The name to assign to the newly generated table. |\n| path | The path to the file. Needs to be accessible from the cluster. Supports the `\"hdfs://\"`, `\"s3a://\"` and `\"file://\"` protocols. |\n| options | A list of strings with additional options. See [https://spark.apache.org/docs/latest/sql-programming-guide.html#configuration](https://spark.apache.org/docs/latest/sql-programming-guide.html#configuration). |\n| repartition | The number of partitions used to distribute the generated table. Use 0 (the default) to avoid partitioning. |\n| memory | Boolean; should the data be loaded eagerly into memory? (That is, should the table be cached?) |\n| overwrite | Boolean; overwrite the table with the given name if it already exists? |\n| columns | A vector of column names or a named vector of column types. If specified, the elements can be `\"binary\"` for `BinaryType`, `\"boolean\"` for `BooleanType`, `\"byte\"` for `ByteType`, `\"integer\"` for `IntegerType`, `\"integer64\"` for `LongType`, `\"double\"` for `DoubleType`, `\"character\"` for `StringType`, `\"timestamp\"` for `TimestampType` and `\"date\"` for `DateType`. |\n| schema | A (java) read schema. Useful for optimizing read operation on nested data. |\n| ... | Optional arguments; currently unused. |\n\n## Details\nYou can read data from HDFS (`hdfs://`), S3 (`s3a://`), as well as   the local file system (`file://`). \n\n\n\n\n\n## See Also\nOther Spark serialization routines:  `collect_from_rds()`, `spark_insert_table()`, `spark_load_table()`, `spark_read_avro()`, `spark_read_binary()`, `spark_read_csv()`, `spark_read_delta()`, `spark_read_image()`, `spark_read_jdbc()`, `spark_read_json()`, `spark_read_libsvm()`, `spark_read_parquet()`, `spark_read_source()`, `spark_read_table()`, `spark_read_text()`, `spark_read()`, `spark_save_table()`, `spark_write_avro()`, `spark_write_csv()`, `spark_write_delta()`, `spark_write_jdbc()`, `spark_write_json()`, `spark_write_orc()`, `spark_write_parquet()`, `spark_write_source()`, `spark_write_table()`, `spark_write_text()`\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}