{
  "hash": "cdbfba83dc21d35555561596d5e17181",
  "result": {
    "markdown": "---\ntitle: \"Spark ML -- OneVsRest\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_classification_one_vs_rest.R*\n\n## ml_one_vs_rest\n\n## Description\nReduction of Multiclass Classification to Binary Classification. Performs reduction using one against all strategy. For a multiclass classification with k classes, train k models (one per class). Each example is scored against all k models and the model with highest score is picked to label the example. \n\n\n## Usage\n```r\nml_one_vs_rest( \n  x, \n  formula = NULL, \n  classifier = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  uid = random_string(\"one_vs_rest_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| classifier | Object of class `ml_estimator`. Base binary classifier that we reduce multiclass classification into. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n\n## Details\nWhen `x` is a `tbl_spark` and `formula` (alternatively, `response` and `features`) is specified, the function returns a `ml_model` object wrapping a `ml_pipeline_model` which contains data pre-processing transformers, the ML predictor, and, for classification models, a post-processing transformer that converts predictions into class labels. For classification, an optional argument `predicted_label_col` (defaults to `\"predicted_label\"`) can be used to specify the name of the predicted label column. In addition to the fitted `ml_pipeline_model`, `ml_model` objects also contain a `ml_pipeline` object where the ML predictor stage is an estimator ready to be fit against data. This is utilized by `ml_save` with `type = \"pipeline\"` to faciliate model refresh workflows. \n\n\n## Value\n\nThe object returned depends on the class of `x`. \n\n  \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns an instance of a `ml_estimator` object. The object contains a pointer to   a Spark `Predictor` object and can be used to compose   `Pipeline` objects. \n\n  \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the predictor appended to the pipeline. \n\n  \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a predictor is constructed then   immediately fit with the input `tbl_spark`, returning a prediction model. \n\n  \n\n- `tbl_spark`, with `formula`: specified When `formula`\n\n    is specified, the input `tbl_spark` is first transformed using a     `RFormula` transformer before being fit by     the predictor. The object returned in this case is a `ml_model` which is a     wrapper of a `ml_pipeline_model`. \n\n\n\n## See Also\n\nSee [https://spark.apache.org/docs/latest/ml-classification-regression.html](https://spark.apache.org/docs/latest/ml-classification-regression.html) for   more information on the set of supervised learning algorithms. \n\nOther ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_naive_bayes()`, `ml_random_forest_classifier()`\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}