{
  "hash": "f839eeecb81355122e45610b0aa426ed",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Write Memory Stream\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/stream_data.R*\n\n## stream_write_memory\n\n## Description\n Writes a Spark dataframe stream into a memory stream. \n\n\n## Usage\n```r\n \nstream_write_memory( \n  x, \n  name = random_string(\"sparklyr_tmp_\"), \n  mode = c(\"append\", \"complete\", \"update\"), \n  trigger = stream_trigger_interval(), \n  checkpoint = file.path(\"checkpoints\", name, random_string(\"\")), \n  options = list(), \n  partition_by = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A Spark DataFrame or dplyr operation |\n| name | The name to assign to the newly generated stream. |\n| mode | Specifies how data is written to a streaming sink. Valid values are `\"append\"`, `\"complete\"` or `\"update\"`. |\n| trigger | The trigger for the stream query, defaults to micro-batches running every 5 seconds. See `stream_trigger_interval` and   `stream_trigger_continuous`. |\n| checkpoint | The location where the system will write all the checkpoint information to guarantee end-to-end fault-tolerance. |\n| options | A list of strings with additional options. |\n| partition_by | Partitions the output by the given list of columns. |\n| ... | Optional arguments; currently unused. |\n\n\n\n\n\n\n## See Also\n Other Spark stream serialization:  `stream_write_csv()`, `stream_write_table()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}