{
  "hash": "eb8a1cefa97ac318c4f90ea2d932f620",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Label propagation algorithm (LPA)\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/gf_lpa.R*\n\n## gf_lpa\n\n## Description\n Run static Label Propagation for detecting communities in networks. Each node in the   network is initially assigned to its own community. At every iteration, nodes send   their community affiliation to all neighbors and update their state to the mode   community affiliation of incoming messages. LPA is a standard community detection    algorithm for graphs. It is very inexpensive   computationally, although (1) convergence is not guaranteed and (2) one can   end up with trivial solutions (all nodes are identified into a single community). \n\n\n## Usage\n```r\n \ngf_lpa(x, max_iter, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | An object coercable to a GraphFrame (typically, a `gf_graphframe`). |\n| max_iter | Maximum number of iterations. |\n| ... | Optional arguments, currently not used. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(graphframes)\n \ng <- gf_friends(sc) \ngf_lpa(g, max_iter = 5) \n \n```\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}