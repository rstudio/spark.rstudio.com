{
  "hash": "7936b9ab2bc7e9bd0dc7a6257a4e636f",
  "result": {
    "markdown": "---\ntitle: \"Instantiate an Array[Float].\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/utils.R*\n\n## jfloat_array\n\n## Description\nInstantiate an `Array[Float]` object with the value specified. NOTE: this method is useful when one has to invoke a Java/Scala method requiring an `Array[Float]` as one of its parameters. \n\n\n## Usage\n```r\njfloat_array(sc, x) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| sc | A `spark_connection`. |\n| x | A numeric vector in R. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"spark://HOST:PORT\") \njflt_arr <- jfloat_array(sc, c(-1.23e-8, 0, -1.23e-8)) \n# jflt_arr is now a reference an array of java.lang.Float \n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}