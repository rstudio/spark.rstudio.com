{
  "hash": "6b3c3ff3dddbc0d8452645fe645d6d22",
  "result": {
    "markdown": "---\ntitle: \"Extracts metrics from a fitted table\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_metrics.R*\n\n## ml_metrics_binary\n\n## Description\nThe function works best when passed a `tbl_spark` created by `ml_predict()`. The output `tbl_spark` will contain the correct variable types and format that the given Spark model \"evaluator\" expects. \n\n\n## Usage\n```r\nml_metrics_binary( \n  x, \n  truth = label, \n  estimate = rawPrediction, \n  metrics = c(\"roc_auc\", \"pr_auc\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `tbl_spark` containing the estimate (prediction) and the truth (value of what actually happened) |\n| truth | The name of the column from `x` with an integer field containing the binary response (0 or 1). The `ml_predict()` function will create a new field named `label` which contains the expected type and values. `truth` defaults to `label`. |\n| estimate | The name of the column from `x` that contains the prediction. Defaults to `rawPrediction`, since its type and expected values will match `truth`. |\n| metrics | A character vector with the metrics to calculate. For binary models the possible values are: `roc_auc` (Area under the Receiver Operator curve), `pr_auc` (Area under the Precesion Recall curve).  Defaults to: `roc_auc`, `pr_auc` |\n| ... | Optional arguments; currently unused. |\n\n## Details\nThe `ml_metrics` family of functions implement Spark's `evaluate` closer to how the `yardstick` package works. The functions expect a table containing the truth and estimate, and return a `tibble` with the results. The `tibble` has the same format and variable names as the output of the `yardstick` functions. \n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(\"local\") \ntbl_iris <- copy_to(sc, iris) \nprep_iris <- tbl_iris %>% \n  mutate(is_setosa = ifelse(Species == \"setosa\", 1, 0)) \niris_split <- sdf_random_split(prep_iris, training = 0.5, test = 0.5) \nmodel <- ml_logistic_regression(iris_split$training, \"is_setosa ~ Sepal_Length\") \ntbl_predictions <- ml_predict(model, iris_split$test) \nml_metrics_binary(tbl_predictions) \n#> # A tibble: 2 Ã— 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 roc_auc binary         0.983\n#> 2 pr_auc  binary         0.967\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}