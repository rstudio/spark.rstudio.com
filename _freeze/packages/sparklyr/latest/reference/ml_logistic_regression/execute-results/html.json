{
  "hash": "727cb684944c47b96fc0e9fd5619e50e",
  "result": {
    "markdown": "---\ntitle: \"Spark ML -- Logistic Regression\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_classification_logistic_regression.R*\n\n## ml_logistic_regression\n\n## Description\n Perform classification using logistic regression. \n\n\n## Usage\n```r\n \nml_logistic_regression( \n  x, \n  formula = NULL, \n  fit_intercept = TRUE, \n  elastic_net_param = 0, \n  reg_param = 0, \n  max_iter = 100, \n  threshold = 0.5, \n  thresholds = NULL, \n  tol = 1e-06, \n  weight_col = NULL, \n  aggregation_depth = 2, \n  lower_bounds_on_coefficients = NULL, \n  lower_bounds_on_intercepts = NULL, \n  upper_bounds_on_coefficients = NULL, \n  upper_bounds_on_intercepts = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  family = \"auto\", \n  prediction_col = \"prediction\", \n  probability_col = \"probability\", \n  raw_prediction_col = \"rawPrediction\", \n  uid = random_string(\"logistic_regression_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| fit_intercept | Boolean; should the model be fit with an intercept term? |\n| elastic_net_param | ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. |\n| reg_param | Regularization parameter (aka lambda) |\n| max_iter | The maximum number of iterations to use. |\n| threshold | in binary classification prediction, in range [0, 1]. |\n| thresholds | Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value `p/t` is predicted, where `p` is the original probability of that class and `t` is the class's threshold. |\n| tol | Param for the convergence tolerance for iterative algorithms. |\n| weight_col | The name of the column to use as weights for the model fit. |\n| aggregation_depth | (Spark 2.1.0+) Suggested depth for treeAggregate (>= 2). |\n| lower_bounds_on_coefficients | (Spark 2.2.0+) Lower bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. |\n| lower_bounds_on_intercepts | (Spark 2.2.0+) Lower bounds on intercepts if fitting under bound constrained optimization. The bounds vector size must be equal with 1 for binomial regression, or the number of classes for multinomial regression. |\n| upper_bounds_on_coefficients | (Spark 2.2.0+) Upper bounds on coefficients if fitting under bound constrained optimization. The bound matrix must be compatible with the shape (1, number of features) for binomial regression, or (number of classes, number of features) for multinomial regression. |\n| upper_bounds_on_intercepts | (Spark 2.2.0+) Upper bounds on intercepts if fitting under bound constrained optimization. The bounds vector size must be equal with 1 for binomial regression, or the number of classes for multinomial regression. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| family | (Spark 2.1.0+) Param for the name of family which is a description of the label distribution to be used in the model. Supported options: \"auto\", \"binomial\", and \"multinomial.\" |\n| prediction_col | Prediction column name. |\n| probability_col | Column name for predicted class conditional probabilities. |\n| raw_prediction_col | Raw prediction (a.k.a. confidence) column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n\n## Details\n When `x` is a `tbl_spark` and `formula` (alternatively, `response` and `features`) is specified, the function returns a `ml_model` object wrapping a `ml_pipeline_model` which contains data pre-processing transformers, the ML predictor, and, for classification models, a post-processing transformer that converts predictions into class labels. For classification, an optional argument `predicted_label_col` (defaults to `\"predicted_label\"`) can be used to specify the name of the predicted label column. In addition to the fitted `ml_pipeline_model`, `ml_model` objects also contain a `ml_pipeline` object where the ML predictor stage is an estimator ready to be fit against data. This is utilized by `ml_save` with `type = \"pipeline\"` to faciliate model refresh workflows. \n\n\n## Value\n\n The object returned depends on the class of `x`.     \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns an instance of a `ml_estimator` object. The object contains a pointer to   a Spark `Predictor` object and can be used to compose   `Pipeline` objects.    \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the predictor appended to the pipeline.    \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a predictor is constructed then   immediately fit with the input `tbl_spark`, returning a prediction model.    \n\n- `tbl_spark`, with `formula`: specified When `formula`     is specified, the input `tbl_spark` is first transformed using a     `RFormula` transformer before being fit by     the predictor. The object returned in this case is a `ml_model` which is a     wrapper of a `ml_pipeline_model`. \n\n \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nsc <- spark_connect(master = \"local\") \nmtcars_tbl <- sdf_copy_to(sc, mtcars, name = \"mtcars_tbl\", overwrite = TRUE) \n \npartitions <- mtcars_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \n \nmtcars_training <- partitions$training \nmtcars_test <- partitions$test \n \nlr_model <- mtcars_training %>% \n  ml_logistic_regression(am ~ gear + carb) \n \npred <- ml_predict(lr_model, mtcars_test) \n \nml_binary_classification_evaluator(pred) \n#> [1] 0.96875\n```\n:::\n\n\n## See Also\n See [https://spark.apache.org/docs/latest/ml-classification-regression.html](https://spark.apache.org/docs/latest/ml-classification-regression.html) for   more information on the set of supervised learning algorithms.  Other ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_multilayer_perceptron_classifier()`, `ml_naive_bayes()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()` \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}