{
  "hash": "ab842b3d48938c18c7ab1c4e924901aa",
  "result": {
    "markdown": "---\ntitle: \"Invoke a Method on a JVM Object\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/spark_invoke.R*\n\n## invoke\n\n## Description\nInvoke methods on Java object references. These functions provide a mechanism for invoking various Java object methods directly from `R`. \n\n\n## Usage\n```r\ninvoke(jobj, method, ...) \n\ninvoke_static(sc, class, method, ...) \n\ninvoke_new(sc, class, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| jobj | An `R` object acting as a Java object reference (typically, a `spark_jobj`). |\n| method | The name of the method to be invoked. |\n| ... | Optional arguments, currently unused. |\n| sc | A `spark_connection`. |\n| class | The name of the Java class whose methods should be invoked. |\n\n## Details\n\nUse each of these functions in the following scenarios: \n\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"spark://HOST:PORT\") \nspark_context(sc) %>% \n  invoke(\"textFile\", \"file.csv\", 1L) %>% \n  invoke(\"count\") \n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}