{
  "hash": "19d36af5efb718555aacf881bcc9ed13",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Instantiate a Java array with a specific element type.\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/utils.R*\n\n## jarray\n\n## Description\n Given a list of Java object references, instantiate an `Array[T]` containing the same list of references, where `T` is a non-primitive type that is more specific than `java.lang.Object`. \n\n\n## Usage\n```r\n \njarray(sc, x, element_type) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| sc | A `spark_connection`. |\n| x | A list of Java object references. |\n| element_type | A valid Java class name representing the generic type parameter of the Java array to be instantiated. Each element of `x` must refer to a Java object that is assignable to `element_type`. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nsc <- spark_connect(master = \"spark://HOST:PORT\") \n \nstring_arr <- jarray(sc, letters, element_type = \"java.lang.String\") \n# string_arr is now a reference to an array of type String[] \n \n```\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}