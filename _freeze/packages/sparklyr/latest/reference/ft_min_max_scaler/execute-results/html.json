{
  "hash": "5e2a88d8b6f917a72ea26008949beb71",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Feature Transformation -- MinMaxScaler (Estimator)\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/ml_feature_min_max_scaler.R*\n\n## ft_min_max_scaler\n\n## Description\n Rescale each feature individually to a common range [min, max] linearly using   column summary statistics, which is also known as min-max normalization or   Rescaling \n\n\n## Usage\n```r\n \nft_min_max_scaler( \n  x, \n  input_col = NULL, \n  output_col = NULL, \n  min = 0, \n  max = 1, \n  uid = random_string(\"min_max_scaler_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| input_col | The name of the input column. |\n| output_col | The name of the output column. |\n| min | Lower bound after transformation, shared by all features Default: 0.0 |\n| max | Upper bound after transformation, shared by all features Default: 1.0 |\n| uid | A character string used to uniquely identify the feature transformer. |\n| ... | Optional arguments; currently unused. |\n\n## Details\n In the case where `x` is a `tbl_spark`, the estimator fits against `x` to obtain a transformer, returning a `tbl_spark`. \n\n\n## Value\n The object returned depends on the class of `x`. If it is a `spark_connection`, the function returns a `ml_estimator` or a `ml_estimator` object. If it is a `ml_pipeline`, it will return a pipeline with the transformer or estimator appended to it. If a `tbl_spark`, it will return a `tbl_spark` with the transformation  applied to it. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \n \nfeatures <- c(\"Sepal_Length\", \"Sepal_Width\", \"Petal_Length\", \"Petal_Width\") \n \niris_tbl %>% \n  ft_vector_assembler( \n    input_col = features, \n    output_col = \"features_temp\" \n  ) %>% \n  ft_min_max_scaler( \n    input_col = \"features_temp\", \n    output_col = \"features\" \n  ) \n \n \n```\n:::\n\n\n## See Also\n Other feature transformers:  `ft_binarizer()`, `ft_bucketizer()`, `ft_chisq_selector()`, `ft_count_vectorizer()`, `ft_dct()`, `ft_elementwise_product()`, `ft_feature_hasher()`, `ft_hashing_tf()`, `ft_idf()`, `ft_imputer()`, `ft_index_to_string()`, `ft_interaction()`, `ft_lsh`, `ft_max_abs_scaler()`, `ft_ngram()`, `ft_normalizer()`, `ft_one_hot_encoder()`, `ft_one_hot_encoder_estimator()`, `ft_pca()`, `ft_polynomial_expansion()`, `ft_quantile_discretizer()`, `ft_r_formula()`, `ft_regex_tokenizer()`, `ft_robust_scaler()`, `ft_sql_transformer()`, `ft_standard_scaler()`, `ft_stop_words_remover()`, `ft_string_indexer()`, `ft_tokenizer()`, `ft_vector_assembler()`, `ft_vector_indexer()`, `ft_vector_slicer()`, `ft_word2vec()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}