{
  "hash": "d527e2c27cd863e98118583b1924ec36",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generate random samples from a hypergeometric distribution\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/sdf_stat.R*\n\n## sdf_rhyper\n\n## Description\n Generator method for creating a single-column Spark dataframes comprised of i.i.d. samples from a hypergeometric distribution. \n\n\n## Usage\n```r\n \nsdf_rhyper( \n  sc, \n  nn, \n  m, \n  n, \n  k, \n  num_partitions = NULL, \n  seed = NULL, \n  output_col = \"x\" \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| sc | A Spark connection. |\n| nn | Sample Size. |\n| m | The number of successes among the population. |\n| n | The number of failures among the population. |\n| k | The number of draws. |\n| num_partitions | Number of partitions in the resulting Spark dataframe (default: default parallelism of the Spark cluster). |\n| seed | Random seed (default: a random long integer). |\n| output_col | Name of the output column containing sample values (default: \"x\"). |\n\n\n\n\n\n\n## See Also\n Other Spark statistical routines:  `sdf_rbeta()`, `sdf_rbinom()`, `sdf_rcauchy()`, `sdf_rchisq()`, `sdf_rexp()`, `sdf_rgamma()`, `sdf_rgeom()`, `sdf_rlnorm()`, `sdf_rnorm()`, `sdf_rpois()`, `sdf_rt()`, `sdf_runif()`, `sdf_rweibull()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}