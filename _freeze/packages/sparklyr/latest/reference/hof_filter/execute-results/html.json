{
  "hash": "dc6750c09a4938a6d10718ac1f34ecfd",
  "result": {
    "markdown": "---\ntitle: \"Filter Array Column\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/dplyr_hof.R*\n\n## hof_filter\n\n## Description\nApply an element-wise filtering function to an array column (this is essentially a dplyr wrapper for the `filter(array<T>, function<T, Boolean>): array<T>` built-in Spark SQL functions) \n\n\n## Usage\n```r\nhof_filter(x, func, expr = NULL, dest_col = NULL, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | The Spark data frame to filter |\n| func | The filtering function |\n| expr | The array being filtered, could be any SQL expression evaluating to an array (default: the last column of the Spark data frame) |\n| dest_col | Column to store the filtered result (default: expr) |\n| ... | Additional params to dplyr::mutate |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr) \nsc <- spark_connect(master = \"local\") \n# only keep odd elements in each array in `array_column` \ncopy_to(sc, tibble::tibble(array_column = list(1:5, 21:25))) %>% \n  hof_filter(~ .x %% 2 == 1) \n#> # Source: spark<?> [?? x 1]\n#>   array_column\n#>   <list>      \n#> 1 <dbl [3]>   \n#> 2 <dbl [3]>\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}