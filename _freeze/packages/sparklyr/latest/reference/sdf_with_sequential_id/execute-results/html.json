{
  "hash": "818804bad716b371f69fc351700c6d97",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Add a Sequential ID Column to a Spark DataFrame\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/sdf_interface.R*\n\n## sdf_with_sequential_id\n\n## Description\n Add a sequential ID column to a Spark DataFrame. The Spark `zipWithIndex` function is used to produce these. This differs from `sdf_with_unique_id` in that the IDs generated are independent of partitioning. \n\n\n## Usage\n```r\n \nsdf_with_sequential_id(x, id = \"id\", from = 1L) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| id | The name of the column to host the generated IDs. |\n| from | The starting value of the id column |\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}