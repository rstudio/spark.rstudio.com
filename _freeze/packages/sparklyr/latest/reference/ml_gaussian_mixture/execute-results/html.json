{
  "hash": "e714b0a4e29ae6d44e94442d55104264",
  "result": {
    "markdown": "---\ntitle: \"Spark ML -- Gaussian Mixture clustering.\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_clustering_gaussian_mixture.R*\n\n## ml_gaussian_mixture\n\n## Description\nThis class performs expectation maximization for multivariate Gaussian Mixture Models (GMMs). A GMM represents a composite distribution of independent Gaussian distributions with associated \"mixing\" weights specifying each's contribution to the composite. Given a set of sample points, this class will maximize the log-likelihood for a mixture of k Gaussians, iterating until the log-likelihood changes by less than `tol`, or until it has reached the max number of iterations. While this process is generally guaranteed to converge, it is not guaranteed to find a global optimum. \n\n\n## Usage\n```r\nml_gaussian_mixture( \n  x, \n  formula = NULL, \n  k = 2, \n  max_iter = 100, \n  tol = 0.01, \n  seed = NULL, \n  features_col = \"features\", \n  prediction_col = \"prediction\", \n  probability_col = \"probability\", \n  uid = random_string(\"gaussian_mixture_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| k | The number of clusters to create |\n| max_iter | The maximum number of iterations to use. |\n| tol | Param for the convergence tolerance for iterative algorithms. |\n| seed | A random seed. Set this value if you need your results to be reproducible across repeated calls. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| probability_col | Column name for predicted class conditional probabilities. Note: Not all models output well-calibrated probability estimates! These probabilities should be treated as confidences, not precise probabilities. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments, see Details. |\n\n\n\n## Value\n\nThe object returned depends on the class of `x`. \n\n  \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns an instance of a `ml_estimator` object. The object contains a pointer to   a Spark `Estimator` object and can be used to compose   `Pipeline` objects. \n\n  \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the clustering estimator appended to the pipeline. \n\n  \n\n- `tbl_spark`: When `x` is a `tbl_spark`, an estimator is constructed then   immediately fit with the input `tbl_spark`, returning a clustering model. \n\n  \n\n- `tbl_spark`, with `formula` or `features` specified: When `formula`\n\n    is specified, the input `tbl_spark` is first transformed using a     `RFormula` transformer before being fit by     the estimator. The object returned in this case is a `ml_model` which is a     wrapper of a `ml_pipeline_model`. This signature does not apply to `ml_lda()`. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \ngmm_model <- ml_gaussian_mixture(iris_tbl, Species ~ .) \npred <- sdf_predict(iris_tbl, gmm_model) \n#> Warning: 'sdf_predict' is deprecated.\n#> Use 'ml_predict' instead.\n#> See help(\"Deprecated\")\nml_clustering_evaluator(pred) \n#> [1] 0.4772758\n```\n:::\n\n\n## See Also\n\nSee [https://spark.apache.org/docs/latest/ml-clustering.html](https://spark.apache.org/docs/latest/ml-clustering.html) for   more information on the set of clustering algorithms. \n\nOther ml clustering algorithms:  `ml_bisecting_kmeans()`, `ml_kmeans()`, `ml_lda()`\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}