{
  "hash": "23b00603031cce6d05a6d78449f17306",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spark ML - Evaluators\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/ml_evaluation_prediction.R*\n\n## ml_evaluator\n\n## Description\n A set of functions to calculate performance metrics for prediction models. Also see the Spark ML Documentation [https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.ml.evaluation.package](https://spark.apache.org/docs/latest/api/scala/index.html#org.apache.spark.ml.evaluation.package) \n\n\n## Usage\n```r\n \nml_binary_classification_evaluator( \n  x, \n  label_col = \"label\", \n  raw_prediction_col = \"rawPrediction\", \n  metric_name = \"areaUnderROC\", \n  uid = random_string(\"binary_classification_evaluator_\"), \n  ... \n) \n \nml_binary_classification_eval( \n  x, \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  metric_name = \"areaUnderROC\" \n) \n \nml_multiclass_classification_evaluator( \n  x, \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  metric_name = \"f1\", \n  uid = random_string(\"multiclass_classification_evaluator_\"), \n  ... \n) \n \nml_classification_eval( \n  x, \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  metric_name = \"f1\" \n) \n \nml_regression_evaluator( \n  x, \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  metric_name = \"rmse\", \n  uid = random_string(\"regression_evaluator_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection` object or a `tbl_spark` containing label and prediction columns. The latter should be the output of `sdf_predict`. |\n| label_col | Name of column string specifying which column contains the true labels or values. |\n| raw_prediction_col | Raw prediction (a.k.a. confidence) column name. |\n| metric_name | The performance metric. See details. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; currently unused. |\n| prediction_col | Name of the column that contains the predicted label or value NOT the scored probability. Column should be of type `Double`. |\n\n## Details\n\n The following metrics are supported       \n\n- Binary Classification: `areaUnderROC` (default) or `areaUnderPR` (not available in Spark 2.X.)    \n\n- Multiclass Classification: `f1` (default), `precision`, `recall`, `weightedPrecision`, `weightedRecall` or `accuracy`; for Spark 2.X: `f1` (default), `weightedPrecision`, `weightedRecall` or `accuracy`.    \n\n- Regression: `rmse` (root mean squared error, default),    `mse` (mean squared error), `r2`, or `mae` (mean absolute error.)   \n\n  `ml_binary_classification_eval()` is an alias for `ml_binary_classification_evaluator()` for backwards compatibility.  `ml_classification_eval()` is an alias for `ml_multiclass_classification_evaluator()` for backwards compatibility. \n\n\n## Value\n The calculated performance metric \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nsc <- spark_connect(master = \"local\") \nmtcars_tbl <- sdf_copy_to(sc, mtcars, name = \"mtcars_tbl\", overwrite = TRUE) \n \npartitions <- mtcars_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \n \nmtcars_training <- partitions$training \nmtcars_test <- partitions$test \n \n# for multiclass classification \nrf_model <- mtcars_training %>% \n  ml_random_forest(cyl ~ ., type = \"classification\") \n \npred <- ml_predict(rf_model, mtcars_test) \n \nml_multiclass_classification_evaluator(pred) \n \n# for regression \nrf_model <- mtcars_training %>% \n  ml_random_forest(cyl ~ ., type = \"regression\") \n \npred <- ml_predict(rf_model, mtcars_test) \n \nml_regression_evaluator(pred, label_col = \"cyl\") \n \n# for binary classification \nrf_model <- mtcars_training %>% \n  ml_random_forest(am ~ gear + carb, type = \"classification\") \n \npred <- ml_predict(rf_model, mtcars_test) \n \nml_binary_classification_evaluator(pred) \n \n \n```\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}