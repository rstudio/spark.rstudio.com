{
  "hash": "7eb9a142f6c1292dcb728bf625fa26a9",
  "result": {
    "markdown": "---\ntitle: \"Spark ML -- Generalized Linear Regression\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_regression_generalized_linear_regression.R*\n\n## ml_generalized_linear_regression\n\n## Description\n Perform regression using Generalized Linear Model (GLM). \n\n\n## Usage\n```r\n \nml_generalized_linear_regression( \n  x, \n  formula = NULL, \n  family = \"gaussian\", \n  link = NULL, \n  fit_intercept = TRUE, \n  offset_col = NULL, \n  link_power = NULL, \n  link_prediction_col = NULL, \n  reg_param = 0, \n  max_iter = 25, \n  weight_col = NULL, \n  solver = \"irls\", \n  tol = 1e-06, \n  variance_power = 0, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  uid = random_string(\"generalized_linear_regression_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| family | Name of family which is a description of the error distribution to be used in the model. Supported options: \"gaussian\", \"binomial\", \"poisson\", \"gamma\" and \"tweedie\". Default is \"gaussian\". |\n| link | Name of link function which provides the relationship between the linear predictor and the mean of the distribution function. See for supported link functions. |\n| fit_intercept | Boolean; should the model be fit with an intercept term? |\n| offset_col | Offset column name. If this is not set, we treat all instance offsets as 0.0. The feature specified as offset has a constant coefficient of 1.0. |\n| link_power | Index in the power link function. Only applicable to the Tweedie family. Note that link power 0, 1, -1 or 0.5 corresponds to the Log, Identity, Inverse or Sqrt link, respectively. When not set, this value defaults to 1 - variancePower, which matches the R \"statmod\" package. |\n| link_prediction_col | Link prediction (linear predictor) column name. Default is not set, which means we do not output link prediction. |\n| reg_param | Regularization parameter (aka lambda) |\n| max_iter | The maximum number of iterations to use. |\n| weight_col | The name of the column to use as weights for the model fit. |\n| solver | Solver algorithm for optimization. |\n| tol | Param for the convergence tolerance for iterative algorithms. |\n| variance_power | Power in the variance function of the Tweedie distribution which provides the relationship between the variance and mean of the distribution. Only applicable to the Tweedie family. (see [Tweedie Distribution (Wikipedia)](https://en.wikipedia.org/wiki/Tweedie_distribution)) Supported values: 0 and [1, Inf). Note that variance power 0, 1, or 2 corresponds to the Gaussian, Poisson or Gamma family, respectively. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n\n## Details\n\n When `x` is a `tbl_spark` and `formula` (alternatively, `response` and `features`) is specified, the function returns a `ml_model` object wrapping a `ml_pipeline_model` which contains data pre-processing transformers, the ML predictor, and, for classification models, a post-processing transformer that converts predictions into class labels. For classification, an optional argument `predicted_label_col` (defaults to `\"predicted_label\"`) can be used to specify the name of the predicted label column. In addition to the fitted `ml_pipeline_model`, `ml_model` objects also contain a `ml_pipeline` object where the ML predictor stage is an estimator ready to be fit against data. This is utilized by `ml_save` with `type = \"pipeline\"` to faciliate model refresh workflows.  Valid link functions for each family is listed below. The first link function of each family is the default one.        \n\n- gaussian: \"identity\", \"log\", \"inverse\"     \n\n- binomial: \"logit\", \"probit\", \"loglog\"     \n\n- poisson: \"log\", \"identity\", \"sqrt\"     \n\n- gamma: \"inverse\", \"identity\", \"log\"     \n\n- tweedie: power link function specified through `link_power`. The default link power in the tweedie family is `1 - variance_power`.     \n\n \n\n\n## Value\n\n The object returned depends on the class of `x`.     \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns an instance of a `ml_estimator` object. The object contains a pointer to   a Spark `Predictor` object and can be used to compose   `Pipeline` objects.    \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the predictor appended to the pipeline.    \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a predictor is constructed then   immediately fit with the input `tbl_spark`, returning a prediction model.    \n\n- `tbl_spark`, with `formula`: specified When `formula`     is specified, the input `tbl_spark` is first transformed using a     `RFormula` transformer before being fit by     the predictor. The object returned in this case is a `ml_model` which is a     wrapper of a `ml_pipeline_model`. \n\n \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n \nlibrary(sparklyr) \n \nsc <- spark_connect(master = \"local\") \nmtcars_tbl <- sdf_copy_to(sc, mtcars, name = \"mtcars_tbl\", overwrite = TRUE) \n \npartitions <- mtcars_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \n \nmtcars_training <- partitions$training \nmtcars_test <- partitions$test \n \n# Specify the grid \nfamily <- c(\"gaussian\", \"gamma\", \"poisson\") \nlink <- c(\"identity\", \"log\") \nfamily_link <- expand.grid(family = family, link = link, stringsAsFactors = FALSE) \nfamily_link <- data.frame(family_link, rmse = 0) \n \n# Train the models \nfor (i in seq_len(nrow(family_link))) { \n  glm_model <- mtcars_training %>% \n    ml_generalized_linear_regression(mpg ~ ., \n      family = family_link[i, 1], \n      link = family_link[i, 2] \n    ) \n \n  pred <- ml_predict(glm_model, mtcars_test) \n  family_link[i, 3] <- ml_regression_evaluator(pred, label_col = \"mpg\") \n} \n \nfamily_link \n#>     family     link     rmse\n#> 1 gaussian identity 2.881163\n#> 2    gamma identity 2.954531\n#> 3  poisson identity 2.942684\n#> 4 gaussian      log 2.613220\n#> 5    gamma      log 2.721447\n#> 6  poisson      log 2.676343\n```\n:::\n\n\n## See Also\n See [https://spark.apache.org/docs/latest/ml-classification-regression.html](https://spark.apache.org/docs/latest/ml-classification-regression.html) for   more information on the set of supervised learning algorithms.  Other ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_naive_bayes()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()` \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}