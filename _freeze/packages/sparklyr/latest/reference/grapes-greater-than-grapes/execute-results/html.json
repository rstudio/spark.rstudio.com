{
  "hash": "f0b85064bbe5928165c9f360c7b35aa6",
  "result": {
    "markdown": "---\ntitle: \"Infix operator for composing a lambda expression\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/dplyr_hof.R*\n\n## %->%\n\n## Description\n Infix operator that allows a lambda expression to be composed in R and be translated to Spark SQL equivalent using ' `dbplyr::translate_sql` functionalities \n\n\n## Usage\n```r\n \nparams %->% ... \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| params | Parameter(s) of the lambda expression, can be either a single parameter or a comma separated listed of parameters in the form of `.(param1, param2, ... )` (see examples) |\n| ... | Body of the lambda expression, *must be within parentheses* |\n\n## Details\n Notice when composing a lambda expression in R, the body of the lambda expression *must always be surrounded with parentheses*, otherwise a parsing error will occur. \n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n \na %->% (mean(a) + 1) # translates to <SQL> `a` -> (AVG(`a`) OVER () + 1.0) \n#> Warning: Missing values are always removed in SQL aggregation functions.\n#> Use `na.rm = TRUE` to silence this warning\n#> This warning is displayed once every 8 hours.\n#> <SQL> a -> (AVG(`a`) OVER () + 1.0)\n \n.(a, b) %->% (a < 1 && b > 1) # translates to <SQL> `a`,`b` -> (`a` < 1.0 AND `b` > 1.0) \n#> <SQL> (a, b) -> (`a` < 1.0 AND `b` > 1.0)\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}