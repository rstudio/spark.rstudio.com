{
  "hash": "cda0220d7447a438b744ab07b6782c0e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Read Apache Avro data into a Spark DataFrame.\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/data_interface.R*\n\n## spark_read_avro\n\n## Description\n Notice this functionality requires the Spark connection `sc` to be instantiated with either an explicitly specified Spark version (i.e., `spark_connect(..., version = <version>, packages = c(\"avro\", <other package(s)>), ...)`) or a specific version of Spark avro package to use (e.g., `spark_connect(..., packages = c(\"org.apache.spark:spark-avro_2.12:3.0.0\", <other package(s)>), ...)`). \n\n\n## Usage\n```r\n \nspark_read_avro( \n  sc, \n  name = NULL, \n  path = name, \n  avro_schema = NULL, \n  ignore_extension = TRUE, \n  repartition = 0, \n  memory = TRUE, \n  overwrite = TRUE \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| sc | A `spark_connection`. |\n| name | The name to assign to the newly generated table. |\n| path | The path to the file. Needs to be accessible from the cluster. Supports the `\"hdfs://\"`, `\"s3a://\"` and `\"file://\"` protocols. |\n| avro_schema | Optional Avro schema in JSON format |\n| ignore_extension | If enabled, all files with and without .avro extension are loaded (default: `TRUE`) |\n| repartition | The number of partitions used to distribute the generated table. Use 0 (the default) to avoid partitioning. |\n| memory | Boolean; should the data be loaded eagerly into memory? (That is, should the table be cached?) |\n| overwrite | Boolean; overwrite the table with the given name if it already exists? |\n\n\n\n\n\n\n## See Also\n Other Spark serialization routines:  `collect_from_rds()`, `spark_insert_table()`, `spark_load_table()`, `spark_read()`, `spark_read_binary()`, `spark_read_csv()`, `spark_read_delta()`, `spark_read_image()`, `spark_read_jdbc()`, `spark_read_json()`, `spark_read_libsvm()`, `spark_read_orc()`, `spark_read_parquet()`, `spark_read_source()`, `spark_read_table()`, `spark_read_text()`, `spark_save_table()`, `spark_write_avro()`, `spark_write_csv()`, `spark_write_delta()`, `spark_write_jdbc()`, `spark_write_json()`, `spark_write_orc()`, `spark_write_parquet()`, `spark_write_source()`, `spark_write_table()`, `spark_write_text()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}