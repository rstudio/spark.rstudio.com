{
  "hash": "4537929957c1a8cb728c70a061c0924d",
  "result": {
    "markdown": "---\ntitle: \"Spark ML -- Linear Regression\"\nexecute:\n  freeze: true\n---\n\n\n*R/ml_regression_linear_regression.R*\n\n## ml_linear_regression\n\n## Description\nPerform regression using linear regression. \n\n\n## Usage\n```r\nml_linear_regression( \n  x, \n  formula = NULL, \n  fit_intercept = TRUE, \n  elastic_net_param = 0, \n  reg_param = 0, \n  max_iter = 100, \n  weight_col = NULL, \n  loss = \"squaredError\", \n  solver = \"auto\", \n  standardization = TRUE, \n  tol = 1e-06, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  uid = random_string(\"linear_regression_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| fit_intercept | Boolean; should the model be fit with an intercept term? |\n| elastic_net_param | ElasticNet mixing parameter, in range [0, 1]. For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty. |\n| reg_param | Regularization parameter (aka lambda) |\n| max_iter | The maximum number of iterations to use. |\n| weight_col | The name of the column to use as weights for the model fit. |\n| loss | The loss function to be optimized. Supported options: \"squaredError\" and \"huber\". Default: \"squaredError\" |\n| solver | Solver algorithm for optimization. |\n| standardization | Whether to standardize the training features before fitting the model. |\n| tol | Param for the convergence tolerance for iterative algorithms. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n\n## Details\nWhen `x` is a `tbl_spark` and `formula` (alternatively, `response` and `features`) is specified, the function returns a `ml_model` object wrapping a `ml_pipeline_model` which contains data pre-processing transformers, the ML predictor, and, for classification models, a post-processing transformer that converts predictions into class labels. For classification, an optional argument `predicted_label_col` (defaults to `\"predicted_label\"`) can be used to specify the name of the predicted label column. In addition to the fitted `ml_pipeline_model`, `ml_model` objects also contain a `ml_pipeline` object where the ML predictor stage is an estimator ready to be fit against data. This is utilized by `ml_save` with `type = \"pipeline\"` to faciliate model refresh workflows. \n\n\n## Value\n\nThe object returned depends on the class of `x`. \n\n  \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns an instance of a `ml_estimator` object. The object contains a pointer to   a Spark `Predictor` object and can be used to compose   `Pipeline` objects. \n\n  \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the predictor appended to the pipeline. \n\n  \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a predictor is constructed then   immediately fit with the input `tbl_spark`, returning a prediction model. \n\n  \n\n- `tbl_spark`, with `formula`: specified When `formula`\n\n    is specified, the input `tbl_spark` is first transformed using a     `RFormula` transformer before being fit by     the predictor. The object returned in this case is a `ml_model` which is a     wrapper of a `ml_pipeline_model`. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\") \nmtcars_tbl <- sdf_copy_to(sc, mtcars, name = \"mtcars_tbl\", overwrite = TRUE) \npartitions <- mtcars_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \nmtcars_training <- partitions$training \nmtcars_test <- partitions$test \nlm_model <- mtcars_training %>% \n  ml_linear_regression(mpg ~ .) \npred <- ml_predict(lm_model, mtcars_test) \nml_regression_evaluator(pred, label_col = \"mpg\") \n```\n:::\n\n\n## See Also\n\nSee [https://spark.apache.org/docs/latest/ml-classification-regression.html](https://spark.apache.org/docs/latest/ml-classification-regression.html) for   more information on the set of supervised learning algorithms. \n\nOther ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_naive_bayes()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}