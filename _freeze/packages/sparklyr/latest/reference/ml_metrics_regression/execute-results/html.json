{
  "hash": "d9b6296b6e5c1694b1a0f3e97e39fef6",
  "result": {
    "markdown": "---\ntitle: \"Extracts metrics from a fitted table\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_metrics.R*\n\n## ml_metrics_regression\n\n## Description\nThe function works best when passed a `tbl_spark` created by `ml_predict()`. The output `tbl_spark` will contain the correct variable types and format that the given Spark model \"evaluator\" expects. \n\n\n## Usage\n```r\nml_metrics_regression( \n  x, \n  truth, \n  estimate = prediction, \n  metrics = c(\"rmse\", \"rsq\", \"mae\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `tbl_spark` containing the estimate (prediction) and the truth (value of what actually happened) |\n| truth | The name of the column from `x` that contains the value of what actually happened |\n| estimate | The name of the column from `x` that contains the prediction. Defaults to `prediction`, since it is the default that `ml_predict()` uses. |\n| metrics | A character vector with the metrics to calculate. For regression models the possible values are: `rmse` (Root mean squared error), `mse` (Mean squared error),`rsq` (R squared), `mae` (Mean absolute error), and `var` (Explained variance). Defaults to: `rmse`, `rsq`, `mae` |\n| ... | Optional arguments; currently unused. |\n\n## Details\nThe `ml_metrics` family of functions implement Spark's `evaluate` closer to how the `yardstick` package works. The functions expect a table containing the truth and estimate, and return a `tibble` with the results. The `tibble` has the same format and variable names as the output of the `yardstick` functions. \n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(\"local\") \ntbl_iris <- copy_to(sc, iris) \niris_split <- sdf_random_split(tbl_iris, training = 0.5, test = 0.5) \ntraining <- iris_split$training \nreg_formula <- \"Sepal_Length ~ Sepal_Width + Petal_Length + Petal_Width\" \nmodel <- ml_generalized_linear_regression(training, reg_formula) \ntbl_predictions <- ml_predict(model, iris_split$test) \ntbl_predictions %>% \n  ml_metrics_regression(Sepal_Length) \n#> # A tibble: 3 Ã— 3\n#>   .metric .estimator .estimate\n#>   <chr>   <chr>          <dbl>\n#> 1 rmse    standard       0.335\n#> 2 rsq     standard       0.825\n#> 3 mae     standard       0.273\n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}