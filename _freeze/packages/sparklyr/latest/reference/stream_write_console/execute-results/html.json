{
  "hash": "1b46c0b4e422ea0cdebf6db924f1eab7",
  "result": {
    "markdown": "---\ntitle: \"Write Console Stream\"\nexecute:\n  freeze: true\n---\n\n\n*R/stream_data.R*\n\n## stream_write_console\n\n## Description\nWrites a Spark dataframe stream into console logs. \n\n\n## Usage\n```r\nstream_write_console( \n  x, \n  mode = c(\"append\", \"complete\", \"update\"), \n  options = list(), \n  trigger = stream_trigger_interval(), \n  partition_by = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A Spark DataFrame or dplyr operation |\n| mode | Specifies how data is written to a streaming sink. Valid values are `\"append\"`, `\"complete\"` or `\"update\"`. |\n| options | A list of strings with additional options. |\n| trigger | The trigger for the stream query, defaults to micro-batches runnnig every 5 seconds. See `stream_trigger_interval` and `stream_trigger_continuous`. |\n| partition_by | Partitions the output by the given list of columns. |\n| ... | Optional arguments; currently unused. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\") \nsdf_len(sc, 10) %>% \n  dplyr::transmute(text = as.character(id)) %>% \n  spark_write_text(\"text-in\") \nstream <- stream_read_text(sc, \"text-in\") %>% stream_write_console() \nstream_stop(stream) \n```\n:::\n\n\n## See Also\nOther Spark stream serialization:  `stream_read_csv()`, `stream_read_delta()`, `stream_read_json()`, `stream_read_kafka()`, `stream_read_orc()`, `stream_read_parquet()`, `stream_read_socket()`, `stream_read_text()`, `stream_write_csv()`, `stream_write_delta()`, `stream_write_json()`, `stream_write_kafka()`, `stream_write_memory()`, `stream_write_orc()`, `stream_write_parquet()`, `stream_write_text()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}