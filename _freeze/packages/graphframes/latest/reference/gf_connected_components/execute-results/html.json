{
  "hash": "e9f0178e6c5850f135aca9c3f01344f1",
  "result": {
    "markdown": "---\ntitle: \"Connected components\"\nexecute:\n  freeze: true\n---\n\n\n*R/gf_connected_components.R*\n\n## gf_connected_components\n\n## Description\nComputes the connected component membership of each vertex and returns a DataFrame    of vertex information with each vertex assigned a component ID. \n\n\n## Usage\n```r\ngf_connected_components(x, broadcast_threshold = 1000000L, \n  algorithm = c(\"graphframes\", \"graphx\"), checkpoint_interval = 2L, \n  ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | An object coercable to a GraphFrame (typically, a `gf_graphframe`). |\n| broadcast_threshold | Broadcast threshold in propagating component assignments. |\n| algorithm | One of 'graphframes' or 'graphx'. |\n| checkpoint_interval | Checkpoint interval in terms of number of iterations. |\n| ... | Optional arguments, currently not used. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(graphframes)\n# checkpoint directory is required for gf_connected_components() \nspark_set_checkpoint_dir(sc, tempdir()) \ng <- gf_friends(sc) \ngf_connected_components(g) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}