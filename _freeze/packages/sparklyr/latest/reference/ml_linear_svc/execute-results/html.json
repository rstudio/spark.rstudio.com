{
  "hash": "bf4420a7a31e35ef6d4154a1af41e7c1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spark ML -- LinearSVC\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/ml_classification_linear_svc.R*\n\n## ml_linear_svc\n\n## Description\n Perform classification using linear support vector machines (SVM). This binary classifier optimizes the Hinge Loss using the OWLQN optimizer. Only supports L2 regularization currently. \n\n\n## Usage\n```r\n \nml_linear_svc( \n  x, \n  formula = NULL, \n  fit_intercept = TRUE, \n  reg_param = 0, \n  max_iter = 100, \n  standardization = TRUE, \n  weight_col = NULL, \n  tol = 1e-06, \n  threshold = 0, \n  aggregation_depth = 2, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  raw_prediction_col = \"rawPrediction\", \n  uid = random_string(\"linear_svc_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| fit_intercept | Boolean; should the model be fit with an intercept term? |\n| reg_param | Regularization parameter (aka lambda) |\n| max_iter | The maximum number of iterations to use. |\n| standardization | Whether to standardize the training features before fitting the model. |\n| weight_col | The name of the column to use as weights for the model fit. |\n| tol | Param for the convergence tolerance for iterative algorithms. |\n| threshold | in binary classification prediction, in range [0, 1]. |\n| aggregation_depth | (Spark 2.1.0+) Suggested depth for treeAggregate (>= 2). |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| raw_prediction_col | Raw prediction (a.k.a. confidence) column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n\n\n\n## Value\n The object returned depends on the class of `x`. If it is a `spark_connection`, the function returns a `ml_estimator` object. If it is a `ml_pipeline`, it will return a pipeline with the predictor appended to it. If a `tbl_spark`, it will return a `tbl_spark` with the predictions added to it. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nlibrary(dplyr) \n \nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \n \npartitions <- iris_tbl %>% \n  filter(Species != \"setosa\") %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \n \niris_training <- partitions$training \niris_test <- partitions$test \n \nsvc_model <- iris_training %>% \n  ml_linear_svc(Species ~ .) \n \npred <- ml_predict(svc_model, iris_test) \n \nml_binary_classification_evaluator(pred) \n \n \n```\n:::\n\n\n## See Also\n Other ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_naive_bayes()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}