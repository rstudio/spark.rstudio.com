{
  "hash": "95400148be8faff2c736f94db53862f3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using sparklyr with an Apache Spark cluster\"\nexecute:\n    eval: false \n    freeze: true\naliases:\n  - /examples/cloudera-aws   \n---\n\n# Summary\n\nThis document demonstrates how to use `sparklyr` with an Cloudera Hadoop & Spark cluster. Data are downloaded from the web and stored in Hive tables on HDFS across multiple worker nodes. RStudio Server is installed on the master node and orchestrates the analysis in spark.\n\n# Cloudera Cluster\n\nThis demonstration is focused on adding RStudio integration to an existing Cloudera cluster. The assumption will be made that there no aid is needed to setup and administer the cluster.\n\n## CDH 5\n\nWe will start with a Cloudera cluster CDH version 5.8.2 (free version) with an underlaying Ubuntu Linux distribution.\n\n![](/images/deployment/cdh/manager-landing-page.png)\n\n## Spark 1.6\n\nThe default Spark 1.6.0 parcel is in installed and running\n\n![](/images/deployment/cdh/spark-history-server-1.png)\n\n## Hive data\n\nFor this demo, we have created and populated 3 tables in Hive. The table names are: flights, airlines and airports. Using Hue, we can see the loaded tables. For the links to the data files and their Hive import scripts please see *Appendix A*.\n\n![](/images/deployment/cdh/hue-metastore-1.png)\n\n# Install RStudio\n\nThe latest version of R is needed. In Ubuntu, the default core R is not the latest so we have to update the source list. We will also install a few other dependencies.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo sh -c 'echo \"deb http://cran.rstudio.com/bin/linux/ubuntu trusty/\" >> /etc/apt/sources.list'\ngpg --keyserver keyserver.ubuntu.com --recv-key 0x517166190x51716619e084dab9\ngpg -a --export 0x517166190x51716619e084dab9 | sudo apt-key add -\nsudo apt-get update\nsudo apt-get install r-base\nsudo apt-get install gdebi-core\nsudo apt-get -y install libcurl4-gnutls-dev\nsudo apt-get -y install libssl-dev\n```\n:::\n\n\nWe will install the preview version of RStudio Server\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nwget https://s3.amazonaws.com/rstudio-dailybuilds/rstudio-server-1.0.40-amd64.deb\nsudo gdebi rstudio-server-1.0.49-amd64.deb\n```\n:::\n\n\n### Create and configure a User\n\nCreate a user called `rstudio` that will perform the data analysis.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo adduser rstudio\n```\n:::\n\n\nTo ease security restriction in this demo, we will add the new user to the default super group defined in the **dfs.permissions.superusergroup** setting in CDH\n\n\n::: {.cell}\n\n```{.bash .cell-code}\nsudo groupadd supergroup\nsudo usermod -a -G supergroup rstudio\n```\n:::\n\n\n# Connect to Spark\n\nLog in to RStudio Server by pointing a browser at your master node IP:8787.\n\n![](/images/deployment/cdh/sign-in-1.png)\n\nSet the environment variable `SPARK_HOME` and then run `spark_connect`. After connecting you will be able to browse the Hive metadata in the RStudio Server Spark pane.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nsc <- spark_connect(master = \"yarn-client\", version=\"1.6.0\", spark_home = '/opt/cloudera/parcels/CDH/lib/spark/')\n\n```\n:::\n\n\nOnce you are connected, you will see the Spark pane appear along with your hive tables.\n\n![](/images/deployment/cdh/spark-pane-1.png)\n\nYou can inspect your tables by clicking on the data icon.\n\n![](/images/deployment/cdh/tables-1.png)\n\nThis is what the tables look like loaded in Spark via the History Server Web UI (port 18088)\n\n![](/images/deployment/cdh/spark-rdd-1.png)\n\n# Data analysis\n\nIs there evidence to suggest that some airline carriers make up time in flight? This analysis predicts time gained in flight by airline carrier.\n\n![](/images/deployment/cdh/data-analysis-1.png)\n\n## Cache the tables into memory\n\nUse `tbl_cache` to load the flights table into memory. Caching tables will make analysis much faster. Create a dplyr reference to the Spark DataFrame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cache flights Hive table into Spark\ntbl_cache(sc, 'flights')\nflights_tbl <- tbl(sc, 'flights')\n\n# Cache airlines Hive table into Spark\ntbl_cache(sc, 'airlines')\nairlines_tbl <- tbl(sc, 'airlines')\n\n# Cache airports Hive table into Spark\ntbl_cache(sc, 'airports')\nairports_tbl <- tbl(sc, 'airports')\n```\n:::\n\n\n## Create a model data set\n\nFilter the data to contain only the records to be used in the fitted model. Join carrier descriptions for reference. Create a new variable called `gain` which represents the amount of time gained (or lost) in flight.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter records and create target variable 'gain'\nmodel_data <- flights_tbl %>%\n  filter(!is.na(arrdelay) & !is.na(depdelay) & !is.na(distance)) %>%\n  filter(depdelay > 15 & depdelay < 240) %>%\n  filter(arrdelay > -60 & arrdelay < 360) %>%\n  filter(year >= 2003 & year <= 2007) %>%\n  left_join(airlines_tbl, by = c(\"uniquecarrier\" = \"code\")) %>%\n  mutate(gain = depdelay - arrdelay) %>%\n  select(year, month, arrdelay, depdelay, distance, uniquecarrier, description, gain)\n\n# Summarize data by carrier\nmodel_data %>%\n  group_by(uniquecarrier) %>%\n  summarize(description = min(description), gain=mean(gain), \n            distance=mean(distance), depdelay=mean(depdelay)) %>%\n  select(description, gain, distance, depdelay) %>%\n  arrange(gain)\n```\n:::\n\n\n    Source:   query [?? x 4]\n    Database: spark connection master=yarn-client app=sparklyr local=FALSE\n\n                        description       gain  distance depdelay\n                              <chr>      <dbl>     <dbl>    <dbl>\n    1        ATA Airlines d/b/a ATA -5.5679651 1240.7219 61.84391\n    2       Northwest Airlines Inc. -3.1134556  779.1926 48.84979\n    3                     Envoy Air -2.2056576  437.0883 54.54923\n    4             PSA Airlines Inc. -1.9267647  500.6955 55.60335\n    5  ExpressJet Airlines Inc. (1) -1.5886314  537.3077 61.58386\n    6               JetBlue Airways -1.3742524 1087.2337 59.80750\n    7         SkyWest Airlines Inc. -1.1265678  419.6489 54.04198\n    8          Delta Air Lines Inc. -0.9829374  956.9576 50.19338\n    9        American Airlines Inc. -0.9631200 1066.8396 56.78222\n    10  AirTran Airways Corporation -0.9411572  665.6574 53.38363\n    # ... with more rows\n\n## Train a linear model\n\nPredict time gained or lost in flight as a function of distance, departure delay, and airline carrier.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Partition the data into training and validation sets\nmodel_partition <- model_data %>% \n  sdf_partition(train = 0.8, valid = 0.2, seed = 5555)\n\n# Fit a linear model\nml1 <- model_partition$train %>%\n  ml_linear_regression(gain ~ distance + depdelay + uniquecarrier)\n\n# Summarize the linear model\nsummary(ml1)\n```\n:::\n\n\n    Call: ml_linear_regression(., gain ~ distance + depdelay + uniquecarrier)\n\n    Deviance Residuals: (approximate):\n         Min       1Q   Median       3Q      Max \n    -302.343   -5.669    2.714    9.832  104.130 \n\n    Coefficients:\n                        Estimate  Std. Error  t value  Pr(>|t|)    \n    (Intercept)      -1.26566581  0.10385870 -12.1864 < 2.2e-16 ***\n    distance          0.00308711  0.00002404 128.4155 < 2.2e-16 ***\n    depdelay         -0.01397013  0.00028816 -48.4812 < 2.2e-16 ***\n    uniquecarrier_AA -2.18483090  0.10985406 -19.8885 < 2.2e-16 ***\n    uniquecarrier_AQ  3.14330242  0.29114487  10.7964 < 2.2e-16 ***\n    uniquecarrier_AS  0.09210380  0.12825003   0.7182 0.4726598    \n    uniquecarrier_B6 -2.66988794  0.12682192 -21.0523 < 2.2e-16 ***\n    uniquecarrier_CO -1.11611186  0.11795564  -9.4621 < 2.2e-16 ***\n    uniquecarrier_DL -1.95206198  0.11431110 -17.0767 < 2.2e-16 ***\n    uniquecarrier_EV  1.70420830  0.11337215  15.0320 < 2.2e-16 ***\n    uniquecarrier_F9 -1.03178176  0.15384863  -6.7065 1.994e-11 ***\n    uniquecarrier_FL -0.99574060  0.12034738  -8.2739 2.220e-16 ***\n    uniquecarrier_HA -1.16970713  0.34894788  -3.3521 0.0008020 ***\n    uniquecarrier_MQ -1.55569040  0.10975613 -14.1741 < 2.2e-16 ***\n    uniquecarrier_NW -3.58502418  0.11534938 -31.0797 < 2.2e-16 ***\n    uniquecarrier_OH -1.40654797  0.12034858 -11.6873 < 2.2e-16 ***\n    uniquecarrier_OO -0.39069404  0.11132164  -3.5096 0.0004488 ***\n    uniquecarrier_TZ -7.26285217  0.34428509 -21.0955 < 2.2e-16 ***\n    uniquecarrier_UA -0.56995737  0.11186757  -5.0949 3.489e-07 ***\n    uniquecarrier_US -0.52000028  0.11218498  -4.6352 3.566e-06 ***\n    uniquecarrier_WN  4.22838982  0.10629405  39.7801 < 2.2e-16 ***\n    uniquecarrier_XE -1.13836940  0.11332176 -10.0455 < 2.2e-16 ***\n    uniquecarrier_YV  3.17149538  0.11709253  27.0854 < 2.2e-16 ***\n    ---\n    Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\n    R-Squared: 0.02301\n    Root Mean Squared Error: 17.83\n\n## Assess model performance\n\nCompare the model performance using the validation data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average gains by predicted decile\nmodel_deciles <- lapply(model_partition, function(x) {\n  sdf_predict(ml1, x) %>%\n    mutate(decile = ntile(desc(prediction), 10)) %>%\n    group_by(decile) %>%\n    summarize(gain = mean(gain)) %>%\n    select(decile, gain) %>%\n    collect()\n})\n\n# Create a summary dataset for plotting\ndeciles <- rbind(\n  data.frame(data = 'train', model_deciles$train),\n  data.frame(data = 'valid', model_deciles$valid),\n  make.row.names = FALSE\n)\n\n# Plot average gains by predicted decile\ndeciles %>%\n  ggplot(aes(factor(decile), gain, fill = data)) +\n  geom_bar(stat = 'identity', position = 'dodge') +\n  labs(title = 'Average gain by predicted decile', x = 'Decile', y = 'Minutes')\n```\n:::\n\n\n![](/images/deployment/cdh/performance-1.png)\n\n## Visualize predictions\n\nCompare actual gains to predicted gains for an out of time sample.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select data from an out of time sample\ndata_2008 <- flights_tbl %>%\n  filter(!is.na(arrdelay) & !is.na(depdelay) & !is.na(distance)) %>%\n  filter(depdelay > 15 & depdelay < 240) %>%\n  filter(arrdelay > -60 & arrdelay < 360) %>%\n  filter(year == 2008) %>%\n  left_join(airlines_tbl, by = c(\"uniquecarrier\" = \"code\")) %>%\n  mutate(gain = depdelay - arrdelay) %>%\n  select(year, month, arrdelay, depdelay, distance, uniquecarrier, description, gain, origin,dest)\n\n# Summarize data by carrier\ncarrier <- sdf_predict(ml1, data_2008) %>%\n  group_by(description) %>%\n  summarize(gain = mean(gain), prediction = mean(prediction), freq = n()) %>%\n  filter(freq > 10000) %>%\n  collect\n\n# Plot actual gains and predicted gains by airline carrier\nggplot(carrier, aes(gain, prediction)) + \n  geom_point(alpha = 0.75, color = 'red', shape = 3) +\n  geom_abline(intercept = 0, slope = 1, alpha = 0.15, color = 'blue') +\n  geom_text(aes(label = substr(description, 1, 20)), size = 3, alpha = 0.75, vjust = -1) +\n  labs(title='Average Gains Forecast', x = 'Actual', y = 'Predicted')\n```\n:::\n\n\n![](/images/deployment/cdh/forecast-1.png)\n\nSome carriers make up more time than others in flight, but the differences are relatively small. The average time gains between the best and worst airlines is only six minutes. The best predictor of time gained is not carrier but flight distance. The biggest gains were associated with the longest flights.\n\n# Share Insights\n\nThis simple linear model contains a wealth of detailed information about carriers, distances traveled, and flight delays. These detailed insights can be conveyed to a non-technical audiance via an interactive [flexdashboard](http://rmarkdown.rstudio.com/flexdashboard/index.html).\n\n## Build dashboard\n\nAggregate the scored data by origin, destination, and airline. Save the aggregated data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summarize by origin, destination, and carrier\nsummary_2008 <- sdf_predict(ml1, data_2008) %>%\n  rename(carrier = uniquecarrier, airline = description) %>%\n  group_by(origin, dest, carrier, airline) %>%\n  summarize(\n    flights = n(),\n    distance = mean(distance),\n    avg_dep_delay = mean(depdelay),\n    avg_arr_delay = mean(arrdelay),\n    avg_gain = mean(gain),\n    pred_gain = mean(prediction)\n    )\n\n# Collect and save objects\npred_data <- collect(summary_2008)\nairports <- collect(select(airports_tbl, name, faa, lat, lon))\nml1_summary <- capture.output(summary(ml1))\nsave(pred_data, airports, ml1_summary, file = 'flights_pred_2008.RData')\n```\n:::\n\n\n## Publish dashboard\n\nUse the saved data to build an R Markdown [flexdashboard](http://rmarkdown.rstudio.com/flexdashboard/index.html). Publish the flexdashboard\n\n![](/images/deployment/cdh/flex-1.png)\n\n#Appendix\n\n### Appendix A - Data files\n\nRun the following script to download data from the web onto your master node. Download the yearly flight data and the airlines lookup table.\n\n\n::: {.cell}\n\n```{.bash .cell-code}\n# Make download directory\nmkdir /tmp/flights\n\n# Download flight data by year\nfor i in {2006..2008}\n  do\n  \techo \"$(date) $i Download\"\n    fnam=$i.csv.bz2\n    wget -O /tmp/flights/$fnam http://stat-computing.org/dataexpo/2009/$fnam\n  \techo \"$(date) $i Unzip\"\n    bunzip2 /tmp/flights/$fnam\n  done\n\n# Download airline carrier data\nwget -O /tmp/airlines.csv http://www.transtats.bts.gov/Download_Lookup.asp?Lookup=L_UNIQUE_CARRIERS\n\n# Download airports data\nwget -O /tmp/airports.csv https://raw.githubusercontent.com/jpatokal/openflights/master/data/airports.dat\n```\n:::\n\n\n### Hive tables\n\nWe used the Hue interface, logged in as 'admin' to load the data into HDFS and then into Hive.\n\n``` sql\nCREATE EXTERNAL TABLE IF NOT EXISTS flights\n(\nyear int,\nmonth int,\ndayofmonth int,\ndayofweek int,\ndeptime int,\ncrsdeptime int,\narrtime int, \ncrsarrtime int,\nuniquecarrier string,\nflightnum int,\ntailnum string, \nactualelapsedtime int,\ncrselapsedtime int,\nairtime string,\narrdelay int,\ndepdelay int, \norigin string,\ndest string,\ndistance int,\ntaxiin string,\ntaxiout string,\ncancelled int,\ncancellationcode string,\ndiverted int,\ncarrierdelay string,\nweatherdelay string,\nnasdelay string,\nsecuritydelay string,\nlateaircraftdelay string\n)\nROW FORMAT DELIMITED\nFIELDS TERMINATED BY ','\nLINES TERMINATED BY '\\n'\nTBLPROPERTIES(\"skip.header.line.count\"=\"1\");\n```\n\n``` sql\nLOAD DATA INPATH '/user/admin/flights/2006.csv/' INTO TABLE flights;\nLOAD DATA INPATH '/user/admin/flights/2007.csv/' INTO TABLE flights;\nLOAD DATA INPATH '/user/admin/flights/2008.csv/' INTO TABLE flights;\n```\n\n``` sql\n# Create metadata for airlines\nCREATE EXTERNAL TABLE IF NOT EXISTS airlines\n(\nCode string,\nDescription string\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'\nWITH SERDEPROPERTIES\n(\n\"separatorChar\" = '\\,',\n\"quoteChar\"     = '\\\"'\n)\nSTORED AS TEXTFILE\ntblproperties(\"skip.header.line.count\"=\"1\");\n```\n\n``` sql\nLOAD DATA INPATH '/user/admin/L_UNIQUE_CARRIERS.csv' INTO TABLE airlines;\n```\n\n``` sql\nCREATE EXTERNAL TABLE IF NOT EXISTS airports\n(\nid string,\nname string,\ncity string,\ncountry string,\nfaa string,\nicao string,\nlat double,\nlon double,\nalt int,\ntz_offset double,\ndst string,\ntz_name string\n)\nROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'\nWITH SERDEPROPERTIES\n(\n\"separatorChar\" = '\\,',\n\"quoteChar\"     = '\\\"'\n)\nSTORED AS TEXTFILE;\n```\n\n``` sql\nLOAD DATA INPATH '/user/admin/airports.dat' INTO TABLE airports;\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}