{
  "hash": "e443f66156070f21e256c154a08fa427",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Unnest wider\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/sdf_unnest_wider.R*\n\n## sdf_unnest_wider\n\n## Description\n Flatten a struct column within a Spark dataframe into one or more columns, similar what to tidyr::unnest_wider does to an R dataframe \n\n\n## Usage\n```r\n \nsdf_unnest_wider( \n  data, \n  col, \n  names_sep = NULL, \n  names_repair = \"check_unique\", \n  ptype = list(), \n  transform = list() \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| data | The Spark dataframe to be unnested |\n| col | The struct column to extract components from |\n| names_sep | If `NULL`, the default, the names will be left as is. If a string, the inner and outer names will be pasted together using `names_sep` as the delimiter. |\n| names_repair | Strategy for fixing duplicate column names (the semantic will be exactly identical to that of `.name_repair` option in `tibble`) |\n| ptype | Optionally, supply an R data frame prototype for the output. Each column of the unnested result will be casted based on the Spark equivalent of the type of the column with the same name within `ptype`, e.g., if `ptype` has a column `x` of type `character`, then column `x` of the unnested result will be casted from its original SQL type to StringType. |\n| transform | Optionally, a named list of transformation functions applied to each component (e.g., list(`x = as.character`) to cast column `x` to String). |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\n \nlibrary(sparklyr) \nsc <- spark_connect(master = \"local\", version = \"2.4.0\") \n \nsdf <- copy_to( \n  sc, \n  dplyr::tibble( \n    x = 1:3, \n    y = list(list(a = 1, b = 2), list(a = 3, b = 4), list(a = 5, b = 6)) \n  ) \n) \n \n# flatten struct column 'y' into two separate columns 'y_a' and 'y_b' \nunnested <- sdf %>% sdf_unnest_wider(y, names_sep = \"_\") \n \n \n```\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}