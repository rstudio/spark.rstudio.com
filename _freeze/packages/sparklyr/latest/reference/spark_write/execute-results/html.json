{
  "hash": "f5af8435dc645f53101ec0c36051f232",
  "result": {
    "markdown": "---\ntitle: \"Write Spark DataFrame to file using a custom writer\"\nexecute:\n  freeze: true\n---\n\n\n*R/data_interface.R*\n\n## spark_write\n\n## Description\nRun a custom R function on Spark worker to write a Spark DataFrame into file(s). If Spark's speculative execution feature is enabled (i.e., `spark.speculation` is true), then each write task may be executed more than once and the user-defined writer function will need to ensure no concurrent writes happen to the same file path (e.g., by appending UUID to each file name). \n\n\n## Usage\n```r\nspark_write(x, writer, paths, packages = NULL) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A Spark Dataframe to be saved into file(s) |\n| writer | A writer function with the signature function(partition, path) where `partition` is a R dataframe containing all rows from one partition of the original Spark Dataframe `x` and path is a string specifying the file to write `partition` to |\n| paths | A single destination path or a list of destination paths, each one specifying a location for a partition from `x` to be written to. If number of partition(s) in `x` is not equal to `length(paths)` then `x` will be re-partitioned to contain `length(paths)` partition(s) |\n| packages | Boolean to distribute `.libPaths()` packages to each node, a list of packages to distribute, or a package bundle created with |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr) \nsc <- spark_connect(master = \"local[3]\") \n# copy some test data into a Spark Dataframe \nsdf <- sdf_copy_to(sc, iris, overwrite = TRUE) \n# create a writer function \nwriter <- function(df, path) { \n  write.csv(df, path) \n} \nspark_write( \n  sdf, \n  writer, \n  # re-partition sdf into 3 partitions and write them to 3 separate files \n  paths = list(\"file:///tmp/file1\", \"file:///tmp/file2\", \"file:///tmp/file3\"), \n) \nspark_write( \n  sdf, \n  writer, \n  # save all rows into a single file \n  paths = list(\"file:///tmp/all_rows\") \n) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}