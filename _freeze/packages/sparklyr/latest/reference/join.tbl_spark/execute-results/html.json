{
  "hash": "06adda04d421847e4c1e9f7219d48abc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Join Spark tbls.\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/dplyr_join.R*\n\n## join.tbl_spark\n\n## Description\n These functions are wrappers around their `dplyr` equivalents that set Spark SQL-compliant values for the `suffix` argument by replacing dots (`.`) with underscores (`_`). See [join] for a description of the general purpose of the functions. \n\n\n## Usage\n```r\n \n## S3 method for class 'tbl_spark'\ninner_join( \n  x, \n  y, \n  by = NULL, \n  copy = FALSE, \n  suffix = c(\"_x\", \"_y\"), \n  auto_index = FALSE, \n  ..., \n  sql_on = NULL \n) \n \n## S3 method for class 'tbl_spark'\nleft_join( \n  x, \n  y, \n  by = NULL, \n  copy = FALSE, \n  suffix = c(\"_x\", \"_y\"), \n  auto_index = FALSE, \n  ..., \n  sql_on = NULL \n) \n \n## S3 method for class 'tbl_spark'\nright_join( \n  x, \n  y, \n  by = NULL, \n  copy = FALSE, \n  suffix = c(\"_x\", \"_y\"), \n  auto_index = FALSE, \n  ..., \n  sql_on = NULL \n) \n \n## S3 method for class 'tbl_spark'\nfull_join( \n  x, \n  y, \n  by = NULL, \n  copy = FALSE, \n  suffix = c(\"_x\", \"_y\"), \n  auto_index = FALSE, \n  ..., \n  sql_on = NULL \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x, y | A pair of lazy data frames backed by database queries. |\n| by | A join specification created with `join_by()`, or a character vector of variables to join by.  If `NULL`, the default, `*_join()` will perform a natural join, using all variables in common across `x` and `y`. A message lists the variables so that you can check they're correct; suppress the message by supplying `by` explicitly.  To join on different variables between `x` and `y`, use a `join_by()` specification. For example, `join_by(a == b)` will match `x$a` to `y$b`.  To join by multiple variables, use a `join_by()` specification with multiple expressions. For example, `join_by(a == b, c == d)` will match `x$a` to `y$b` and `x$c` to `y$d`. If the column names are the same between `x` and `y`, you can shorten this by listing only the variable names, like `join_by(a, c)`.  `join_by()` can also be used to perform inequality, rolling, and overlap joins. See the documentation at ?join_by for details on these types of joins.  For simple equality joins, you can alternatively specify a character vector of variable names to join by. For example, `by = c(\"a\", \"b\")` joins `x$a` to `y$a` and `x$b` to `y$b`. If variable names differ between `x` and `y`, use a named character vector like `by = c(\"x_a\" = \"y_a\", \"x_b\" = \"y_b\")`.  To perform a cross-join, generating all combinations of `x` and `y`, see `cross_join()`. |\n| copy | If `x` and `y` are not from the same data source, and `copy` is `TRUE`, then `y` will be copied into a temporary table in same database as `x`. `*_join()` will automatically run `ANALYZE` on the created table in the hope that this will make you queries as efficient as possible by giving more data to the query planner.  This allows you to join tables across srcs, but it's potentially expensive operation so you must opt into it. |\n| suffix | If there are non-joined duplicate variables in `x` and `y`, these suffixes will be added to the output to disambiguate them. Should be a character vector of length 2. |\n| auto_index | if `copy` is `TRUE`, automatically create indices for the variables in `by`. This may speed up the join if there are matching indexes in `x`. |\n| ... | Other parameters passed onto methods. |\n| sql_on | A custom join predicate as an SQL expression. Usually joins use column equality, but you can perform more complex queries by supply `sql_on` which should be a SQL expression that uses `LHS` and `RHS` aliases to refer to the left-hand side or right-hand side of the join respectively. |\n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}