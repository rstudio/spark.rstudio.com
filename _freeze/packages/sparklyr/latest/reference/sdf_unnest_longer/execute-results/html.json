{
  "hash": "3745c3d561d6cf693011a1ea35d23022",
  "result": {
    "markdown": "---\ntitle: \"Unnest longer\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/sdf_unnest_longer.R*\n\n## sdf_unnest_longer\n\n## Description\n Expand a struct column or an array column within a Spark dataframe into one or more rows, similar what to tidyr::unnest_longer does to an R dataframe. An index column, if included, will be 1-based if `col` is an array column. \n\n\n## Usage\n```r\n \nsdf_unnest_longer( \n  data, \n  col, \n  values_to = NULL, \n  indices_to = NULL, \n  include_indices = NULL, \n  names_repair = \"check_unique\", \n  ptype = list(), \n  transform = list() \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| data | The Spark dataframe to be unnested |\n| col | The struct column to extract components from |\n| values_to | Name of column to store vector values. Defaults to `col`. |\n| indices_to | A string giving the name of column which will contain the inner names or position (if not named) of the values. Defaults to `col` with `_id` suffix |\n| include_indices | Whether to include an index column. An index column will be included by default if `col` is a struct column. It will also be included if `indices_to` is not `NULL`. |\n| names_repair | Strategy for fixing duplicate column names (the semantic will be exactly identical to that of `.name_repair` option in `tibble`) |\n| ptype | Optionally, supply an R data frame prototype for the output. Each column of the unnested result will be casted based on the Spark equivalent of the type of the column with the same name within `ptype`, e.g., if `ptype` has a column `x` of type `character`, then column `x` of the unnested result will be casted from its original SQL type to StringType. |\n| transform | Optionally, a named list of transformation functions applied |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n \nlibrary(sparklyr) \nsc <- spark_connect(master = \"local\", version = \"2.4.0\") \n \n# unnesting a struct column \nsdf <- copy_to( \n  sc, \n  tibble::tibble( \n    x = 1:3, \n    y = list(list(a = 1, b = 2), list(a = 3, b = 4), list(a = 5, b = 6)) \n  ) \n) \n \nunnested <- sdf %>% sdf_unnest_longer(y, indices_to = \"attr\") \n \n# unnesting an array column \nsdf <- copy_to( \n  sc, \n  tibble::tibble( \n    x = 1:3, \n    y = list(1:10, 1:5, 1:2) \n  ) \n) \n \nunnested <- sdf %>% sdf_unnest_longer(y, indices_to = \"array_idx\") \n \n \n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}