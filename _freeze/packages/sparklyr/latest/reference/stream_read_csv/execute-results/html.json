{
  "hash": "85f34a0fae8da81c893677cb72c0072d",
  "result": {
    "markdown": "---\ntitle: \"Read CSV Stream\"\nexecute:\n  freeze: true\n---\n\n\n*R/stream_data.R*\n\n## stream_read_csv\n\n## Description\nReads a CSV stream as a Spark dataframe stream. \n\n\n## Usage\n```r\nstream_read_csv( \n  sc, \n  path, \n  name = NULL, \n  header = TRUE, \n  columns = NULL, \n  delimiter = \",\", \n  quote = \"\\\"\", \n  escape = \"\\\\\", \n  charset = \"UTF-8\", \n  null_value = NULL, \n  options = list(), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| sc | A `spark_connection`. |\n| path | The path to the file. Needs to be accessible from the cluster. Supports the `\"hdfs://\"`, `\"s3a://\"` and `\"file://\"` protocols. |\n| name | The name to assign to the newly generated stream. |\n| header | Boolean; should the first row of data be used as a header? Defaults to `TRUE`. |\n| columns | A vector of column names or a named vector of column types. If specified, the elements can be `\"binary\"` for `BinaryType`, `\"boolean\"` for `BooleanType`, `\"byte\"` for `ByteType`, `\"integer\"` for `IntegerType`, `\"integer64\"` for `LongType`, `\"double\"` for `DoubleType`, `\"character\"` for `StringType`, `\"timestamp\"` for `TimestampType` and `\"date\"` for `DateType`. |\n| delimiter | The character used to delimit each column. Defaults to `','`. |\n| quote | The character used as a quote. Defaults to `'\"'`. |\n| escape | The character used to escape other characters. Defaults to `'\\'`. |\n| charset | The character set. Defaults to `\"UTF-8\"`. |\n| null_value | The character to use for null, or missing, values. Defaults to `NULL`. |\n| options | A list of strings with additional options. |\n| ... | Optional arguments; currently unused. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\") \ndir.create(\"csv-in\") \nwrite.csv(iris, \"csv-in/data.csv\", row.names = FALSE) \ncsv_path <- file.path(\"file://\", getwd(), \"csv-in\") \nstream <- stream_read_csv(sc, csv_path) %>% stream_write_csv(\"csv-out\") \nstream_stop(stream) \n```\n:::\n\n\n## See Also\nOther Spark stream serialization:  `stream_read_delta()`, `stream_read_json()`, `stream_read_kafka()`, `stream_read_orc()`, `stream_read_parquet()`, `stream_read_socket()`, `stream_read_text()`, `stream_write_console()`, `stream_write_csv()`, `stream_write_delta()`, `stream_write_json()`, `stream_write_kafka()`, `stream_write_memory()`, `stream_write_orc()`, `stream_write_parquet()`, `stream_write_text()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}