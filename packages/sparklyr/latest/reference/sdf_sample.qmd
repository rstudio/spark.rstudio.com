---
title: "Randomly Sample Rows from a Spark DataFrame"
execute:
  freeze: true
---

```{r, eval=ecodown::examples_not_run()}
#| include: false
options("pillar.width" = 60)
library(sparklyr) 
library(dplyr)
```

*R/sdf_interface.R*

## sdf_sample

## Description
 Draw a random sample of rows (with or without replacement) from a Spark DataFrame. 


## Usage
```r
 
sdf_sample(x, fraction = 1, replacement = TRUE, seed = NULL) 
```

## Arguments
|Arguments|Description|
|---|---|
| x | An object coercable to a Spark DataFrame. |
| fraction | The fraction to sample. |
| replacement | Boolean; sample with replacement? |
| seed | An (optional) integer seed. |


## Section

## Transforming Spark DataFrames

   The family of functions prefixed with `sdf_` generally access the Scala Spark DataFrame API directly, as opposed to the `dplyr` interface which uses Spark SQL. These functions will 'force' any pending SQL in a `dplyr` pipeline, such that the resulting `tbl_spark` object returned will no longer have the attached 'lazy' SQL operations. Note that the underlying Spark DataFrame **does** execute its operations lazily, so that even though the pending set of operations (currently) are not exposed at the `R` level, these operations will only be executed when you explicitly `collect()` the table. 




## See Also
 Other Spark data frames:  `sdf_copy_to()`, `sdf_distinct()`, `sdf_random_split()`, `sdf_register()`, `sdf_sort()`, `sdf_weighted_sample()` 


```{r, eval=ecodown::examples_not_run()}
#| include: false
spark_disconnect_all()
```
