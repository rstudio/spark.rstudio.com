{
  "hash": "e4ed0d8d0e9bdae7139d7b27f5a220d7",
  "result": {
    "markdown": "---\ntitle: \"Creating Extensions for `sparklyr`\"\nexecute:\n  freeze: true\naliases:\n  - /extensions\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\", version = \"2.0.0\")\n```\n:::\n\n\n## Introduction\n\nThe sparklyr package provides a [dplyr](dplyr.html) interface to Spark DataFrames as well as an R interface to Spark's distributed [machine learning](mllib.html) pipelines. However, since Spark is a general-purpose cluster computing system there are many other R interfaces that could be built (e.g. interfaces to custom machine learning pipelines, interfaces to 3rd party Spark packages, etc.).\n\nThe facilities used internally by sparklyr for its dplyr and machine learning interfaces are available to extension packages. This guide describes how you can use these tools to create your own custom R interfaces to Spark.\n\n### Examples\n\nHere's an example of an extension function that calls the text file line counting function available via the SparkContext:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\ncount_lines <- function(sc, file) {\n  spark_context(sc) %>% \n    invoke(\"textFile\", file, 1L) %>% \n    invoke(\"count\")\n}\n```\n:::\n\n\nThe `count_lines` function takes a `spark_connection` (`sc`) argument which enables it to obtain a reference to the `SparkContext` object, and in turn call the `textFile().count()` method.\n\nYou can use this function with an existing sparklyr connection as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\")\ncount_lines(sc, \"hdfs://path/data.csv\")\n```\n:::\n\n\nHere are links to some additional examples of extension packages:\n\n| Package | Description  |\n|----------------------------|---------------------------------------------|\n| [`spark.sas7bdat`](https://github.com/bnosac/spark.sas7bdat) | Read in SAS data in parallel into Apache Spark. |\n| [`rsparkling`](https://github.com/h2oai/rsparkling) | Extension for using [H2O](h2o.ai) machine learning algorithms against Spark Data Frames.  |\n| [`sparkhello`](https://github.com/javierluraschi/sparkhello) | Simple example of including a custom JAR file within an extension package. |\n| [`rddlist`](https://github.com/clarkfitzg/rddlist) | Implements some methods of an R list as a Spark RDD (resilient distributed dataset). |\n| [`sparkwarc`](https://github.com/javierluraschi/sparkwarc) | Load [WARC files](http://commoncrawl.org/the-data/get-started/) into Apache Spark with sparklyr. |\n| [`sparkavro`](https://github.com/chezou/sparkavro) | Load Avro data into Spark with sparklyr. It is a wrapper of [spark-avro](https://github.com/databricks/spark-avro) |\n| [`crassy`](https://github.com/AkhilNairAmey/crassy) | Connect to Cassandra with sparklyr using the `Spark-Cassandra-Connector`. |\n| [`sparklygraphs`](https://github.com/kevinykuo/sparklygraphs) | R interface for [GraphFrames](https://graphframes.github.io/) which aims to provide the functionality of [GraphX](http://spark.apache.org/graphx/). |\n| [`sparklyr.nested`](https://mitre.github.io/sparklyr.nested/) | Extension for working with nested data. |\n| [`sparklyudf`](https://github.com/javierluraschi/sparklyudf) | Simple example registering an Scala UDF within an extension package. |\n| [`mleap`](https://github.com/rstudio/mleap) | R Interface to MLeap. |\n| [`sparkbq`](https://github.com/miraisolutions/sparkbq) | Sparklyr extension package to connect to Google BigQuery. |\n| [`sparkgeo`](https://github.com/miraisolutions/sparkgeo) | Sparklyr extension package providing geospatial analytics capabilities. |\n| [`sparklytd`](https://github.com/chezou/sparklytd) | Spaklyr plugin for td-spark to connect TD from R. |\n| [`sparkts`](https://github.com/nathaneastwood/sparkts) | Extensions for the spark-timeseries framework. |\n| [`sparkxgb`](https://github.com/rstudio/sparkxgb) | R interface for XGBoost on Spark. |\n| [`sparktf`](https://github.com/rstudio/sparktf) | R interface to Spark TensorFlow Connector. |\n| [`geospark`](https://github.com/harryprince/geospark) | R interface to GeoSpark to perform spatial analysis in Spark. |\n| [`synapseml`](https://github.com/microsoft/SynapseML/blob/master/website/docs/reference/R-setup.md) | Simplifies the creation of scalable machine learning pipelines. SynapseML builds on Apache Spark and SparkML to enable new kinds of machine learning, analytics, and model deployment workflows. |\n\n## Core Types\n\nThree classes are defined for representing the fundamental types of the R to Java bridge:\n\n| Function | Description  |\n|----------------------------|---------------------------------------------|\n| [`spark_connection`](/reference/spark-connections/) | Connection between R and the Spark shell process |\n| [`spark_jobj`](reference/sparklyr/latest/spark_jobj.html) | Instance of a remote Spark object |\n| [`spark_dataframe`](reference/sparklyr/latest/spark_dataframe.html) | Instance of a remote Spark DataFrame object |\n\nS3 methods are defined for each of these classes so they can be easily converted to or from objects that contain or wrap them. Note that for any given `spark_jobj` it's possible to discover the underlying `spark_connection`.\n\n## Calling Spark from R\n\nThere are several functions available for calling the methods of Java objects and static methods of Java classes:\n\n| Function | Description  |\n|----------------------------|---------------------------------------------|\n| [`invoke`](reference/sparklyr/latest/invoke.html) | Call a method on an object |\n| [`invoke_new`](reference/sparklyr/latest/invoke.html) | Create a new object by invoking a constructor |\n| [`invoke_static`](reference/sparklyr/latest/invoke.html) | Call a static method on an object  |\n\nFor example, to create a new instance of the `java.math.BigInteger` class and then call the `longValue()` method on it you would use code like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillionBigInteger <- invoke_new(sc, \"java.math.BigInteger\", \"1000000000\")\nbillion <- invoke(billionBigInteger, \"longValue\")\n```\n:::\n\n\nNote the `sc` argument: that's the `spark_connection` object which is provided by the front-end package (e.g. sparklyr).\n\nThe previous example can be re-written to be more compact and clear using [magrittr](https://cran.r-project.org/web/packages/magrittr/vignettes/magrittr.html) pipes: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbillion <- sc %>% \n  invoke_new(\"java.math.BigInteger\", \"1000000000\") %>%\n    invoke(\"longValue\")\n```\n:::\n\n\nThis syntax is similar to the method-chaining syntax often used with Scala code so is generally preferred.\n\nCalling a static method of a class is also straightforward. For example, to call the `Math::hypot()` static function you would use this code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhypot <- sc %>% \n  invoke_static(\"java.lang.Math\", \"hypot\", 10, 20) \n```\n:::\n\n\n## Wrapper Functions\n\nCreating an extension typically consists of writing R wrapper functions for a set of Spark services. In this section we'll describe the typical form of these functions as well as how to handle special types like Spark DataFrames. \n\nHere's the wrapper function for `textFile().count()` which we defined earlier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_lines <- function(sc, file) {\n  spark_context(sc) %>% \n    invoke(\"textFile\", file, 1L) %>% \n      invoke(\"count\")\n}\n```\n:::\n\n\nThe `count_lines` function takes a `spark_connection` (`sc`) argument which enables it to obtain a reference to the `SparkContext` object, and in turn call the `textFile().count()` method.\n\nThe following functions are useful for implementing wrapper functions of various kinds:\n\n| Function | Description  |\n|----------------------------|---------------------------------------------|\n| [`spark_connection`](/reference/spark-connections/) | Get the Spark connection associated with an object (S3)|\n| [`spark_jobj`](reference/sparklyr/latest/spark_jobj.html) | Get the Spark jobj associated with an object (S3) |\n| [`spark_dataframe`](reference/sparklyr/latest/spark_dataframe.html) | Get the Spark DataFrame associated with an object (S3) |\n| [`spark_context`](/reference/spark-api/) | Get the SparkContext for a `spark_connection` |\n| [`hive_context`](/reference/spark-api/) | Get the HiveContext for a `spark_connection` |\n| [`spark_version`](reference/sparklyr/latest/spark_version.html) | Get the version of Spark (as a `numeric_version`) for a `spark_connection` |\n\n\n\nThe use of these functions is illustrated in this simple example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanalyze <- function(x, features) {\n  \n  # normalize whatever we were passed (e.g. a dplyr tbl) into a DataFrame\n  df <- spark_dataframe(x)\n  \n  # get the underlying connection so we can create new objects\n  sc <- spark_connection(df)\n  \n  # create an object to do the analysis and call its `analyze` and `summary`\n  # methods (note that the df and features are passed to the analyze function)\n  summary <- sc %>%  \n    invoke_new(\"com.example.tools.Analyzer\") %>% \n      invoke(\"analyze\", df, features) %>% \n      invoke(\"summary\")\n\n  # return the results\n  summary\n}\n```\n:::\n\n\nThe first argument is an object that can be accessed using the Spark DataFrame API (this might be an actual reference to a DataFrame or could rather be a dplyr `tbl` which has a DataFrame reference inside it). \n\nAfter using the `spark_dataframe` function to normalize the reference, we extract the underlying Spark connection associated with the data frame using the `spark_connection` function. Finally, we create a new `Analyzer` object, call it's `analyze` method with the DataFrame and list of features, and then call the `summary` method on the results of the analysis.\n\nAccepting a `spark_jobj` or `spark_dataframe` as the first argument of a function makes it very easy to incorporate into magrittr pipelines so this pattern is highly recommended when possible.\n\n## Dependencies\n\nWhen creating R packages which implement interfaces to Spark you may need to include additional dependencies. Your dependencies might be a set of [Spark Packages](https://spark-packages.org/) or might be a custom JAR file. In either case, you'll need a way to specify that these dependencies should be included during the initialization of a Spark session. A Spark dependency is defined using the `spark_dependency` function:\n\n| Function | Description  |\n|----------------------------|---------------------------------------------|\n| [`spark_dependency`](reference/sparklyr/latest/spark_dependency) | Define a Spark dependency consisting of JAR files and Spark packages |\n\nYour extension package can specify it's dependencies by implementing a function named `spark_dependencies` within the package (this function should *not* be publicly exported). For example, let's say you were creating an extension package named **sparkds** that needs to include a custom JAR as well as the Redshift and Apache Avro packages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspark_dependencies <- function(spark_version, scala_version, ...) {\n  spark_dependency(\n    jars = c(\n      system.file(\n        sprintf(\"java/sparkds-%s-%s.jar\", spark_version, scala_version), \n        package = \"sparkds\"\n      )\n    ),\n    packages = c(\n      sprintf(\"com.databricks:spark-redshift_%s:0.6.0\", scala_version),\n      sprintf(\"com.databricks:spark-avro_%s:2.0.1\", scala_version)\n    )\n  )\n}\n\n.onLoad <- function(libname, pkgname) {\n  sparklyr::register_extension(pkgname)\n}\n```\n:::\n\n\nThe `spark_version` argument is provided so that a package can support multiple Spark versions for it's JARs. Note that the argument will include just the major and minor versions (e.g. `1.6` or `2.0`) and will not include the patch level (as JARs built for a given major/minor version are expected to work for all patch levels).\n\nThe `scala_version` argument is provided so that a single package can support multiple Scala compiler versions for it's JARs and packages (currently Scala 1.6 downloadable binaries are compiled with Scala 2.10 and Scala 2.0 downloadable binaries are compiled with Scala 2.11).\n\nThe `...` argument is unused but nevertheless should be included to ensure compatibility if new arguments are added to `spark_dependencies` in the future.\n\nThe `.onLoad` function registers your extension package so that it's `spark_dependencies` function will be automatically called when new connections to Spark are made via `spark_connect`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nlibrary(sparkds)\nsc <- spark_connect(master = \"local\")\n```\n:::\n\n\n### Compiling JARs\n\nThe **sparklyr** package includes a utility function (`compile_package_jars`) that will automatically compile a JAR file from your Scala source code for the required permutations of Spark and Scala compiler versions. To use the function just invoke it from the root directory of your R package as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsparklyr::compile_package_jars()\n```\n:::\n\n\nNote that a prerequisite to calling `compile_package_jars` is the installation of the Scala 2.10 and 2.11 compilers to one of the following paths:\n\n  - /opt/scala\n  - /opt/local/scala\n  - /usr/local/scala\n  - ~/scala (Windows-only)\n\nSee the [sparkhello](https://github.com/jjallaire/sparkhello) repository for a complete example of including a custom JAR within an extension package.\n\n#### CRAN \n\nWhen including a JAR file within an R package distributed on CRAN, you should follow the guidelines provided in [Writing R Extensions](https://cran.r-project.org/doc/manuals/r-release/R-exts.html#Non_002dR-scripts-in-packages):\n\n> Java code is a special case: except for very small programs, .java files should be byte-compiled (to a .class file) and distributed as part of a .jar file: the conventional location for the .jar file(s) is `inst/java`. It is desirable (and required under an Open Source license) to make the Java source files available: this is best done in a top-level `java` directory in the package -- the source files should not be installed.\n\n## Data Types\n\nThe [`ensure_*`](http://spark.rstudio.com/reference/sparklyr/latest/ensure.html) family of functions can be used to enforce specific data types that are passed to a Spark routine. For example, Spark routines that require an integer will not accept an R numeric element. Use these functions ensure certain parameters are scalar integers, or scalar doubles, and so on.\n\n* ensure_scalar_integer \n* ensure_scalar_double\n* ensure_scalar_boolean \n* ensure_scalar_character\n\nIn order to match the correct data types while calling Scala code from R, or retrieving results from Scala back to R, consider the following types mapping:\n\n| From R      | Scala          | To R      |\n|-------------|----------------|-----------|\n| NULL        | void           | NULL      |\n| integer     | Int            | integer   |\n| character   | String         | character |\n| logical     | Boolean        | logical   |\n| double      | Double         | double    |\n| numeric     | Double         | double    |\n|             | Float          | double    |\n|             | Decimal        | double    |\n|             | Long           | double    |\n| raw         | Array[Byte]    | raw       |\n| Date        | Date           | Date      |\n| POSIXlt     | Time           |           |\n| POSIXct     | Time           | POSIXct   |\n| list        | Array[T]       | list      |\n| environment | Map[String, T] |           |\n| jobj        | Object         | jobj      |\n\n## Compiling\n\nMost Spark extensions won't need to define their own compilation specification, and can instead rely on the default behavior of `compile_package_jars`. For users who would like to take more control over where the scalac compilers should be looked up, use the [`spark_compilation_spec`](http://spark.rstudio.com/reference/sparklyr/latest/spark_compilation_spec.html) fucnction. The Spark compilation specification is used when compiling Spark extension Java Archives, and defines which versions of Spark, as well as which versions of Scala, should be used for compilation.\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}