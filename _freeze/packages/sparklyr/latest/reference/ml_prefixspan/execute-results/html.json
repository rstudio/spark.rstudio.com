{
  "hash": "00734b5576cee6ba64f9bdc72525aeb6",
  "result": {
    "markdown": "---\ntitle: \"Frequent Pattern Mining -- PrefixSpan\"\nexecute:\n  freeze: true\n---\n\n\n*R/ml_fpm_prefixspan.R*\n\n## ml_prefixspan\n\n## Description\nPrefixSpan algorithm for mining frequent itemsets. \n\n\n## Usage\n```r\nml_prefixspan( \n  x, \n  seq_col = \"sequence\", \n  min_support = 0.1, \n  max_pattern_length = 10, \n  max_local_proj_db_size = 3.2e+07, \n  uid = random_string(\"prefixspan_\"), \n  ... \n) \n\nml_freq_seq_patterns(model) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| seq_col | The name of the sequence column in dataset (default “sequence”). Rows with nulls in this column are ignored. |\n| min_support | The minimum support required to be considered a frequent sequential pattern. |\n| max_pattern_length | The maximum length of a frequent sequential pattern. Any frequent pattern exceeding this length will not be included in the results. |\n| max_local_proj_db_size | The maximum number of items allowed in a prefix-projected database before local iterative processing of the projected database begins. This parameter should be tuned with respect to the size of your executors. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; currently unused. |\n| model | A Prefix Span model. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr) \nsc <- spark_connect(master = \"local\", version = \"2.4.0\") \nitems_df <- tibble::tibble( \n  seq = list( \n    list(list(1, 2), list(3)), \n    list(list(1), list(3, 2), list(1, 2)), \n    list(list(1, 2), list(5)), \n    list(list(6)) \n  ) \n) \nitems_sdf <- copy_to(sc, items_df, overwrite = TRUE) \nprefix_span_model <- ml_prefixspan( \n  sc, \n  seq_col = \"seq\", \n  min_support = 0.5, \n  max_pattern_length = 5, \n  max_local_proj_db_size = 32000000 \n) \nfrequent_items <- prefix_span_model$frequent_sequential_patterns(items_sdf) %>% collect() \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}