{
  "hash": "af0e41d5a13da3e5ac1faf6c1a43a31a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Feature Transformation -- Imputer (Estimator)\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/ml_feature_imputer.R*\n\n## ft_imputer\n\n## Description\n Imputation estimator for completing missing values, either using the mean or   the median of the columns in which the missing values are located. The input   columns should be of numeric type. This function requires Spark 2.2.0+. \n\n\n## Usage\n```r\n \nft_imputer( \n  x, \n  input_cols = NULL, \n  output_cols = NULL, \n  missing_value = NULL, \n  strategy = \"mean\", \n  uid = random_string(\"imputer_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| input_cols | The names of the input columns |\n| output_cols | The names of the output columns. |\n| missing_value | The placeholder for the missing values. All occurrences of `missing_value` will be imputed. Note that null values are always treated as missing. |\n| strategy | The imputation strategy. Currently only \"mean\" and \"median\" are supported. If \"mean\", then replace missing values using the mean value of the feature. If \"median\", then replace missing values using the approximate median value of the feature. Default: mean |\n| uid | A character string used to uniquely identify the feature transformer. |\n| ... | Optional arguments; currently unused. |\n\n## Details\n In the case where `x` is a `tbl_spark`, the estimator fits against `x` to obtain a transformer, returning a `tbl_spark`. \n\n\n## Value\n The object returned depends on the class of `x`. If it is a `spark_connection`, the function returns a `ml_estimator` or a `ml_estimator` object. If it is a `ml_pipeline`, it will return a pipeline with the transformer or estimator appended to it. If a `tbl_spark`, it will return a `tbl_spark` with the transformation  applied to it. \n\n\n\n## See Also\n Other feature transformers:  `ft_binarizer()`, `ft_bucketizer()`, `ft_chisq_selector()`, `ft_count_vectorizer()`, `ft_dct()`, `ft_elementwise_product()`, `ft_feature_hasher()`, `ft_hashing_tf()`, `ft_idf()`, `ft_index_to_string()`, `ft_interaction()`, `ft_lsh`, `ft_max_abs_scaler()`, `ft_min_max_scaler()`, `ft_ngram()`, `ft_normalizer()`, `ft_one_hot_encoder()`, `ft_one_hot_encoder_estimator()`, `ft_pca()`, `ft_polynomial_expansion()`, `ft_quantile_discretizer()`, `ft_r_formula()`, `ft_regex_tokenizer()`, `ft_robust_scaler()`, `ft_sql_transformer()`, `ft_standard_scaler()`, `ft_stop_words_remover()`, `ft_string_indexer()`, `ft_tokenizer()`, `ft_vector_assembler()`, `ft_vector_indexer()`, `ft_vector_slicer()`, `ft_word2vec()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}