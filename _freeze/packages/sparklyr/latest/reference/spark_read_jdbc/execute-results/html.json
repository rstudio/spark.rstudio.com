{
  "hash": "86ed5c9e67f63dc9f4baf2b5f5059f17",
  "result": {
    "markdown": "---\ntitle: \"Read from JDBC connection into a Spark DataFrame.\"\nexecute:\n  freeze: true\n---\n\n\n*R/data_interface.R*\n\n## spark_read_jdbc\n\n## Description\nRead from JDBC connection into a Spark DataFrame. \n\n\n## Usage\n```r\nspark_read_jdbc( \n  sc, \n  name, \n  options = list(), \n  repartition = 0, \n  memory = TRUE, \n  overwrite = TRUE, \n  columns = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| sc | A `spark_connection`. |\n| name | The name to assign to the newly generated table. |\n| options | A list of strings with additional options. See [https://spark.apache.org/docs/latest/sql-programming-guide.html#configuration](https://spark.apache.org/docs/latest/sql-programming-guide.html#configuration). |\n| repartition | The number of partitions used to distribute the generated table. Use 0 (the default) to avoid partitioning. |\n| memory | Boolean; should the data be loaded eagerly into memory? (That is, should the table be cached?) |\n| overwrite | Boolean; overwrite the table with the given name if it already exists? |\n| columns | A vector of column names or a named vector of column types. If specified, the elements can be `\"binary\"` for `BinaryType`, `\"boolean\"` for `BooleanType`, `\"byte\"` for `ByteType`, `\"integer\"` for `IntegerType`, `\"integer64\"` for `LongType`, `\"double\"` for `DoubleType`, `\"character\"` for `StringType`, `\"timestamp\"` for `TimestampType` and `\"date\"` for `DateType`. |\n| ... | Optional arguments; currently unused. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect( \n  master = \"local\", \n  config = list( \n    `sparklyr.shell.driver-class-path` = \"/usr/share/java/mysql-connector-java-8.0.25.jar\" \n  ) \n) \nspark_read_jdbc( \n  sc, \n  name = \"my_sql_table\", \n  options = list( \n    url = \"jdbc:mysql://localhost:3306/my_sql_schema\", \n    driver = \"com.mysql.jdbc.Driver\", \n    user = \"me\", \n    password = \"******\", \n    dbtable = \"my_sql_table\" \n  ) \n) \n```\n:::\n\n\n## See Also\nOther Spark serialization routines:  `collect_from_rds()`, `spark_insert_table()`, `spark_load_table()`, `spark_read_avro()`, `spark_read_binary()`, `spark_read_csv()`, `spark_read_delta()`, `spark_read_image()`, `spark_read_json()`, `spark_read_libsvm()`, `spark_read_orc()`, `spark_read_parquet()`, `spark_read_source()`, `spark_read_table()`, `spark_read_text()`, `spark_read()`, `spark_save_table()`, `spark_write_avro()`, `spark_write_csv()`, `spark_write_delta()`, `spark_write_jdbc()`, `spark_write_json()`, `spark_write_orc()`, `spark_write_parquet()`, `spark_write_source()`, `spark_write_table()`, `spark_write_text()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}