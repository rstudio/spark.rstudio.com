{
  "hash": "5126a77871684a534209b2888d81a792",
  "result": {
    "markdown": "---\ntitle: \"Feature Transformation -- Binarizer (Transformer)\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_feature_binarizer.R*\n\n## ft_binarizer\n\n## Description\n Apply thresholding to a column, such that values less than or equal to the `threshold` are assigned the value 0.0, and values greater than the threshold are assigned the value 1.0. Column output is numeric for compatibility with other modeling functions. \n\n\n## Usage\n```r\n \nft_binarizer( \n  x, \n  input_col, \n  output_col, \n  threshold = 0, \n  uid = random_string(\"binarizer_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| input_col | The name of the input column. |\n| output_col | The name of the output column. |\n| threshold | Threshold used to binarize continuous features. |\n| uid | A character string used to uniquely identify the feature transformer. |\n| ... | Optional arguments; currently unused. |\n\n\n\n## Value\n\n The object returned depends on the class of `x`.     \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns a `ml_transformer`,   a `ml_estimator`, or one of their subclasses. The object contains a pointer to   a Spark `Transformer` or `Estimator` object and can be used to compose   `Pipeline` objects.    \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the transformer or estimator appended to the pipeline.    \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a transformer is constructed then   immediately applied to the input `tbl_spark`, returning a `tbl_spark` \n\n \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nlibrary(dplyr) \n \nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \n \niris_tbl %>% \n  ft_binarizer( \n    input_col = \"Sepal_Length\", \n    output_col = \"Sepal_Length_bin\", \n    threshold = 5 \n  ) %>% \n  select(Sepal_Length, Sepal_Length_bin, Species) \n#> # Source: spark<?> [?? x 3]\n#>    Sepal_Length Sepal_Length_bin Species\n#>           <dbl>            <dbl> <chr>  \n#>  1          5.1                1 setosa \n#>  2          4.9                0 setosa \n#>  3          4.7                0 setosa \n#>  4          4.6                0 setosa \n#>  5          5                  0 setosa \n#>  6          5.4                1 setosa \n#>  7          4.6                0 setosa \n#>  8          5                  0 setosa \n#>  9          4.4                0 setosa \n#> 10          4.9                0 setosa \n#> # â€¦ with more rows\n```\n:::\n\n\n## See Also\n See [https://spark.apache.org/docs/latest/ml-features.html](https://spark.apache.org/docs/latest/ml-features.html) for   more information on the set of transformations available for DataFrame   columns in Spark.  Other feature transformers:  `ft_bucketizer()`, `ft_chisq_selector()`, `ft_count_vectorizer()`, `ft_dct()`, `ft_elementwise_product()`, `ft_feature_hasher()`, `ft_hashing_tf()`, `ft_idf()`, `ft_imputer()`, `ft_index_to_string()`, `ft_interaction()`, `ft_lsh`, `ft_max_abs_scaler()`, `ft_min_max_scaler()`, `ft_ngram()`, `ft_normalizer()`, `ft_one_hot_encoder_estimator()`, `ft_one_hot_encoder()`, `ft_pca()`, `ft_polynomial_expansion()`, `ft_quantile_discretizer()`, `ft_r_formula()`, `ft_regex_tokenizer()`, `ft_robust_scaler()`, `ft_sql_transformer()`, `ft_standard_scaler()`, `ft_stop_words_remover()`, `ft_string_indexer()`, `ft_tokenizer()`, `ft_vector_assembler()`, `ft_vector_indexer()`, `ft_vector_slicer()`, `ft_word2vec()` \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}