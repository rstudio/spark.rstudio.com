{
  "hash": "70a788d9bedf8b3febfda15e6c9e3e9e",
  "result": {
    "markdown": "---\ntitle: \"Define a Spark Compilation Specification\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/spark_compile.R*\n\n## spark_compilation_spec\n\n## Description\nFor use with `compile_package_jars`. The Spark compilation specification is used when compiling Spark extension Java Archives, and defines which versions of Spark, as well as which versions of Scala, should be used for compilation. \n\n\n## Usage\n```r\nspark_compilation_spec( \n  spark_version = NULL, \n  spark_home = NULL, \n  scalac_path = NULL, \n  scala_filter = NULL, \n  jar_name = NULL, \n  jar_path = NULL, \n  jar_dep = NULL, \n  embedded_srcs = \"embedded_sources.R\" \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| spark_version | The Spark version to build against. This can be left unset if the path to a suitable Spark home is supplied. |\n| spark_home | The path to a Spark home installation. This can be left unset if `spark_version` is supplied; in such a case, `sparklyr` will attempt to discover the associated Spark installation using `spark_home_dir`. |\n| scalac_path | The path to the `scalac` compiler to be used during compilation of your Spark extension. Note that you should ensure the version of `scalac` selected matches the version of `scalac` used with the version of Spark you are compiling against. |\n| scala_filter | An optional `R` function that can be used to filter which `scala` files are used during compilation. This can be useful if you have auxiliary files that should only be included with certain versions of Spark. |\n| jar_name | The name to be assigned to the generated `jar`. |\n| jar_path | The path to the `jar` tool to be used during compilation of your Spark extension. |\n| jar_dep | An optional list of additional `jar` dependencies. |\n| embedded_srcs | Embedded source file(s) under `<R package root>/java` to be included in the root of the resulting jar file as resources |\n\n## Details\nMost Spark extensions won't need to define their own compilation specification, and can instead rely on the default behavior of `compile_package_jars`. \n\n\n\n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}