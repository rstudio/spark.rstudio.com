{
  "hash": "ed87392e7a7b3dcf700ac553bf1022e5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Define a Spark dependency\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/spark_extensions.R*\n\n## spark_dependency\n\n## Description\n Define a Spark dependency consisting of a set of custom JARs, Spark packages, and customized dbplyr SQL translation env. \n\n\n## Usage\n```r\n \nspark_dependency( \n  jars = NULL, \n  packages = NULL, \n  initializer = NULL, \n  catalog = NULL, \n  repositories = NULL, \n  dbplyr_sql_variant = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| jars | Character vector of full paths to JAR files. |\n| packages | Character vector of Spark packages names. |\n| initializer | Optional callback function called when initializing a connection. |\n| catalog | Optional location where extension JAR files can be downloaded for Livy. |\n| repositories | Character vector of Spark package repositories. |\n| dbplyr_sql_variant | Customization of dbplyr SQL translation env. Must be a named list of the following form: `   list(     scalar = list(scalar_fn1 = ..., scalar_fn2 = ..., <etc>),     aggregate = list(agg_fn1 = ..., agg_fn2 = ..., <etc>),     window = list(wnd_fn1 = ..., wnd_fn2 = ..., <etc>)   )   ` See sql_variant for details. |\n| ... | Additional optional arguments. |\n\n\n\n## Value\n An object of type `spark_dependency` \n\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}