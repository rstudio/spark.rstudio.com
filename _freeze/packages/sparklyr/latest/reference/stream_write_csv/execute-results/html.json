{
  "hash": "3bb8b7b8f099df887a4f8469cc165d1c",
  "result": {
    "markdown": "---\ntitle: \"Write CSV Stream\"\nexecute:\n  freeze: true\n---\n\n\n*R/stream_data.R*\n\n## stream_write_csv\n\n## Description\nWrites a Spark dataframe stream into a tabular (typically, comma-separated) stream. \n\n\n## Usage\n```r\nstream_write_csv( \n  x, \n  path, \n  mode = c(\"append\", \"complete\", \"update\"), \n  trigger = stream_trigger_interval(), \n  checkpoint = file.path(path, \"checkpoint\"), \n  header = TRUE, \n  delimiter = \",\", \n  quote = \"\\\"\", \n  escape = \"\\\\\", \n  charset = \"UTF-8\", \n  null_value = NULL, \n  options = list(), \n  partition_by = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A Spark DataFrame or dplyr operation |\n| path | The path to the file. Needs to be accessible from the cluster. Supports the `\"hdfs://\"`, `\"s3a://\"` and `\"file://\"` protocols. |\n| mode | Specifies how data is written to a streaming sink. Valid values are `\"append\"`, `\"complete\"` or `\"update\"`. |\n| trigger | The trigger for the stream query, defaults to micro-batches runnnig every 5 seconds. See `stream_trigger_interval` and `stream_trigger_continuous`. |\n| checkpoint | The location where the system will write all the checkpoint information to guarantee end-to-end fault-tolerance. |\n| header | Should the first row of data be used as a header? Defaults to `TRUE`. |\n| delimiter | The character used to delimit each column, defaults to `,`. |\n| quote | The character used as a quote. Defaults to `'\"'`. |\n| escape | The character used to escape other characters, defaults to `\\`. |\n| charset | The character set, defaults to `\"UTF-8\"`. |\n| null_value | The character to use for default values, defaults to `NULL`. |\n| options | A list of strings with additional options. |\n| partition_by | Partitions the output by the given list of columns. |\n| ... | Optional arguments; currently unused. |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\") \ndir.create(\"csv-in\") \nwrite.csv(iris, \"csv-in/data.csv\", row.names = FALSE) \ncsv_path <- file.path(\"file://\", getwd(), \"csv-in\") \nstream <- stream_read_csv(sc, csv_path) %>% stream_write_csv(\"csv-out\") \nstream_stop(stream) \n```\n:::\n\n\n## See Also\nOther Spark stream serialization:  `stream_read_csv()`, `stream_read_delta()`, `stream_read_json()`, `stream_read_kafka()`, `stream_read_orc()`, `stream_read_parquet()`, `stream_read_socket()`, `stream_read_text()`, `stream_write_console()`, `stream_write_delta()`, `stream_write_json()`, `stream_write_kafka()`, `stream_write_memory()`, `stream_write_orc()`, `stream_write_parquet()`, `stream_write_text()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}