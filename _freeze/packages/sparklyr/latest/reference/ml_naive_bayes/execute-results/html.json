{
  "hash": "bf251ab5881d5c007b580efbd82b83ab",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spark ML -- Naive-Bayes\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/ml_classification_naive_bayes.R*\n\n## ml_naive_bayes\n\n## Description\n Naive Bayes Classifiers. It supports Multinomial NB (see [here](https://nlp.stanford.edu/IR-book/html/htmledition/naive-bayes-text-classification-1.html)) which can handle finitely supported discrete data. For example, by converting documents into TF-IDF vectors, it can be used for document classification. By making every vector a binary (0/1) data, it can also be used as Bernoulli NB (see [here](http://nlp.stanford.edu/IR-book/html/htmledition/the-bernoulli-model-1.html)). The input feature values must be nonnegative. \n\n\n## Usage\n```r\n \nml_naive_bayes( \n  x, \n  formula = NULL, \n  model_type = \"multinomial\", \n  smoothing = 1, \n  thresholds = NULL, \n  weight_col = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  probability_col = \"probability\", \n  raw_prediction_col = \"rawPrediction\", \n  uid = random_string(\"naive_bayes_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| model_type | The model type. Supported options: `\"multinomial\"` and `\"bernoulli\"`. (default = `multinomial`) |\n| smoothing | The (Laplace) smoothing parameter. Defaults to 1. |\n| thresholds | Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value `p/t` is predicted, where `p` is the original probability of that class and `t` is the class's threshold. |\n| weight_col | (Spark 2.1.0+) Weight column name. If this is not set or empty, we treat all instance weights as 1.0. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| probability_col | Column name for predicted class conditional probabilities. |\n| raw_prediction_col | Raw prediction (a.k.a. confidence) column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n\n\n\n## Value\n The object returned depends on the class of `x`. If it is a `spark_connection`, the function returns a `ml_estimator` object. If it is a `ml_pipeline`, it will return a pipeline with the predictor appended to it. If a `tbl_spark`, it will return a `tbl_spark` with the predictions added to it. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \n \npartitions <- iris_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \n \niris_training <- partitions$training \niris_test <- partitions$test \n \nnb_model <- iris_training %>% \n  ml_naive_bayes(Species ~ .) \n \npred <- ml_predict(nb_model, iris_test) \n \nml_multiclass_classification_evaluator(pred) \n \n \n```\n:::\n\n\n## See Also\n Other ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}