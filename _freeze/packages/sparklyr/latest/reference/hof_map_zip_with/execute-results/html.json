{
  "hash": "24c5115a4b1e8930d969ec2b445ed11d",
  "result": {
    "markdown": "---\ntitle: \"Merges two maps into one\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/dplyr_hof.R*\n\n## hof_map_zip_with\n\n## Description\n Merges two maps into a single map by applying the function specified to pairs of values with the same key (this is essentially a dplyr wrapper to the `map_zip_with(map1, map2, func)` higher- order function, which is supported since Spark 3.0) \n\n\n## Usage\n```r\n \nhof_map_zip_with(x, func, dest_col = NULL, map1 = NULL, map2 = NULL, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | The Spark data frame to be processed |\n| func | The function to apply (it should take (key, value1, value2) as arguments, where (key, value1) is a key-value pair present in map1, (key, value2) is a key-value pair present in map2, and return a transformed value associated with key in the resulting map |\n| dest_col | Column to store the query result (default: the last column of the Spark data frame) |\n| map1 | The first map being merged, could be any SQL expression evaluating to a map (default: the first column of the Spark data frame) |\n| map2 | The second map being merged, could be any SQL expression evaluating to a map (default: the second column of the Spark data frame) |\n| ... | Additional params to dplyr::mutate |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n \n \nlibrary(sparklyr) \nsc <- spark_connect(master = \"local\", version = \"3.0.0\") \n \n# create a Spark dataframe with 2 columns of type MAP<STRING, INT> \ntwo_maps_tbl <- sdf_copy_to( \n  sc, \n  tibble::tibble( \n    m1 = c(\"{\\\"1\\\":2,\\\"3\\\":4,\\\"5\\\":6}\", \"{\\\"2\\\":1,\\\"4\\\":3,\\\"6\\\":5}\"), \n    m2 = c(\"{\\\"1\\\":1,\\\"3\\\":3,\\\"5\\\":5}\", \"{\\\"2\\\":2,\\\"4\\\":4,\\\"6\\\":6}\") \n  ), \n  overwrite = TRUE \n) %>% \n  dplyr::mutate(m1 = from_json(m1, \"MAP<STRING, INT>\"), \n                m2 = from_json(m2, \"MAP<STRING, INT>\")) \n \n# create a 3rd column containing MAP<STRING, INT> values derived from the \n# first 2 columns \n \ntransformed_two_maps_tbl <- two_maps_tbl %>% \n  hof_map_zip_with( \n    func = .(k, v1, v2) %->% (CONCAT(k, \"_\", v1, \"_\", v2)), \n    dest_col = m3 \n  ) \n \n \n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}