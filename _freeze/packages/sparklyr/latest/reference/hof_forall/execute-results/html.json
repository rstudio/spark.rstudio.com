{
  "hash": "7baf3451390447a749d7f809afaf838e",
  "result": {
    "markdown": "---\ntitle: \"Checks whether all elements in an array satisfy a predicate\"\nexecute:\n  freeze: true\n---\n\n\n*R/dplyr_hof.R*\n\n## hof_forall\n\n## Description\nChecks whether the predicate specified holds for all elements in an array (this is essentially a dplyr wrapper to the `forall(expr, pred)` higher- order function, which is supported since Spark 3.0) \n\n\n## Usage\n```r\nhof_forall(x, pred, expr = NULL, dest_col = NULL, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | The Spark data frame to be processed |\n| pred | The predicate to test (it should take an array element as argument and return a boolean value) |\n| expr | The array being tested, could be any SQL expression evaluating to an array (default: the last column of the Spark data frame) |\n| dest_col | Column to store the boolean result (default: expr) |\n| ... | Additional params to dplyr::mutate |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nsc <- spark_connect(master = \"local\", version = \"3.0.0\") \ndf <- tibble::tibble( \n  x = list(c(1, 2, 3, 4, 5), c(6, 7, 8, 9, 10)), \n  y = list(c(1, 4, 2, 8, 5), c(7, 1, 4, 2, 8)), \n) \nsdf <- sdf_copy_to(sc, df, overwrite = TRUE) \nall_positive_tbl <- sdf %>% \n  hof_forall(pred = ~ .x > 0, expr = y, dest_col = all_positive) %>% \n  dplyr::select(all_positive) \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}