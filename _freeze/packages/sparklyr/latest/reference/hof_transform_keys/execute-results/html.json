{
  "hash": "6d083807c50a2f1a209cc9e8f7dc6a8c",
  "result": {
    "markdown": "---\ntitle: \"Transforms keys of a map\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/dplyr_hof.R*\n\n## hof_transform_keys\n\n## Description\nApplies the transformation function specified to all keys of a map (this is essentially a dplyr wrapper to the `transform_keys(expr, func)` higher- order function, which is supported since Spark 3.0) \n\n\n## Usage\n```r\nhof_transform_keys(x, func, expr = NULL, dest_col = NULL, ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | The Spark data frame to be processed |\n| func | The transformation function to apply (it should take (key, value) as arguments and return a transformed key) |\n| expr | The map being transformed, could be any SQL expression evaluating to a map (default: the last column of the Spark data frame) |\n| dest_col | Column to store the transformed result (default: expr) |\n| ... | Additional params to dplyr::mutate |\n\n\n\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr) \nsc <- spark_connect(master = \"local\", version = \"3.0.0\") \nsdf <- sdf_len(sc, 1) %>% dplyr::mutate(m = map(\"a\", 0L, \"b\", 2L, \"c\", -1L)) \ntransformed_sdf <- sdf %>% hof_transform_keys(~ CONCAT(.x, \" == \", .y)) \n```\n:::\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}