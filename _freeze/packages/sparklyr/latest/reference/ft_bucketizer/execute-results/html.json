{
  "hash": "eb11a5bf340e7681ef74714f3c693ece",
  "result": {
    "markdown": "---\ntitle: \"Feature Transformation -- Bucketizer (Transformer)\"\nexecute:\n  freeze: true\n---\n\n\n*R/ml_feature_bucketizer.R*\n\n## ft_bucketizer\n\n## Description\n\nSimilar to `R`'s `cut` function, this transforms a numeric column into a discretized column, with breaks specified through the `splits`\n\nparameter. \n\n\n## Usage\n```r\nft_bucketizer( \n  x, \n  input_col = NULL, \n  output_col = NULL, \n  splits = NULL, \n  input_cols = NULL, \n  output_cols = NULL, \n  splits_array = NULL, \n  handle_invalid = \"error\", \n  uid = random_string(\"bucketizer_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| input_col | The name of the input column. |\n| output_col | The name of the output column. |\n| splits | A numeric vector of cutpoints, indicating the bucket boundaries. |\n| input_cols | Names of input columns. |\n| output_cols | Names of output columns. |\n| splits_array | Parameter for specifying multiple splits parameters. Each element in this array can be used to map continuous features into buckets. |\n| handle_invalid | (Spark 2.1.0+) Param for how to handle invalid entries. Options are 'skip' (filter out rows with invalid values), 'error' (throw an error), or 'keep' (keep invalid values in a special additional bucket). Default: \"error\" |\n| uid | A character string used to uniquely identify the feature transformer. |\n| ... | Optional arguments; currently unused. |\n\n\n\n## Value\n\nThe object returned depends on the class of `x`. \n\n  \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns a `ml_transformer`,   a `ml_estimator`, or one of their subclasses. The object contains a pointer to   a Spark `Transformer` or `Estimator` object and can be used to compose   `Pipeline` objects. \n\n  \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the transformer or estimator appended to the pipeline. \n\n  \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a transformer is constructed then   immediately applied to the input `tbl_spark`, returning a `tbl_spark`\n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\nlibrary(dplyr) \nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \niris_tbl %>% \n  ft_bucketizer( \n    input_col = \"Sepal_Length\", \n    output_col = \"Sepal_Length_bucket\", \n    splits = c(0, 4.5, 5, 8) \n  ) %>% \n  select(Sepal_Length, Sepal_Length_bucket, Species) \n```\n:::\n\n\n## See Also\n\nSee [https://spark.apache.org/docs/latest/ml-features.html](https://spark.apache.org/docs/latest/ml-features.html) for   more information on the set of transformations available for DataFrame   columns in Spark. \n\nOther feature transformers:  `ft_binarizer()`, `ft_chisq_selector()`, `ft_count_vectorizer()`, `ft_dct()`, `ft_elementwise_product()`, `ft_feature_hasher()`, `ft_hashing_tf()`, `ft_idf()`, `ft_imputer()`, `ft_index_to_string()`, `ft_interaction()`, `ft_lsh`, `ft_max_abs_scaler()`, `ft_min_max_scaler()`, `ft_ngram()`, `ft_normalizer()`, `ft_one_hot_encoder_estimator()`, `ft_one_hot_encoder()`, `ft_pca()`, `ft_polynomial_expansion()`, `ft_quantile_discretizer()`, `ft_r_formula()`, `ft_regex_tokenizer()`, `ft_robust_scaler()`, `ft_sql_transformer()`, `ft_standard_scaler()`, `ft_stop_words_remover()`, `ft_string_indexer()`, `ft_tokenizer()`, `ft_vector_assembler()`, `ft_vector_indexer()`, `ft_vector_slicer()`, `ft_word2vec()`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}