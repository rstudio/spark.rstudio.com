{
  "hash": "14704c009f340a05baaac9f8f02f9cde",
  "result": {
    "markdown": "---\ntitle: \"Feature Transformation -- PCA (Estimator)\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_feature_pca.R*\n\n## ft_pca\n\n## Description\n PCA trains a model to project vectors to a lower dimensional space of the top k principal components. \n\n\n## Usage\n```r\n \nft_pca( \n  x, \n  input_col = NULL, \n  output_col = NULL, \n  k = NULL, \n  uid = random_string(\"pca_\"), \n  ... \n) \n \nml_pca(x, features = tbl_vars(x), k = length(features), pc_prefix = \"PC\", ...) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| input_col | The name of the input column. |\n| output_col | The name of the output column. |\n| k | The number of principal components |\n| uid | A character string used to uniquely identify the feature transformer. |\n| ... | Optional arguments; currently unused. |\n| features | The columns to use in the principal components analysis. Defaults to all columns in `x`. |\n| pc_prefix | Length-one character vector used to prepend names of components. |\n\n## Details\n In the case where `x` is a `tbl_spark`, the estimator fits against `x`   to obtain a transformer, which is then immediately used to transform `x`, returning a `tbl_spark`.  `ml_pca()` is a wrapper around `ft_pca()` that returns a   `ml_model`. \n\n\n## Value\n\n The object returned depends on the class of `x`.     \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns a `ml_transformer`,   a `ml_estimator`, or one of their subclasses. The object contains a pointer to   a Spark `Transformer` or `Estimator` object and can be used to compose   `Pipeline` objects.    \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the transformer or estimator appended to the pipeline.    \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a transformer is constructed then   immediately applied to the input `tbl_spark`, returning a `tbl_spark` \n\n \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sparklyr)\n \nlibrary(dplyr) \n \nsc <- spark_connect(master = \"local\") \niris_tbl <- sdf_copy_to(sc, iris, name = \"iris_tbl\", overwrite = TRUE) \n \niris_tbl %>% \n  select(-Species) %>% \n  ml_pca(k = 2) \n#> Explained variance:\n#> \n#>        PC1        PC2 \n#> 0.92461872 0.05306648 \n#> \n#> Rotation:\n#>                      PC1         PC2\n#> Sepal_Length -0.36138659 -0.65658877\n#> Sepal_Width   0.08452251 -0.73016143\n#> Petal_Length -0.85667061  0.17337266\n#> Petal_Width  -0.35828920  0.07548102\n```\n:::\n\n\n## See Also\n See [https://spark.apache.org/docs/latest/ml-features.html](https://spark.apache.org/docs/latest/ml-features.html) for   more information on the set of transformations available for DataFrame   columns in Spark.  Other feature transformers:  `ft_binarizer()`, `ft_bucketizer()`, `ft_chisq_selector()`, `ft_count_vectorizer()`, `ft_dct()`, `ft_elementwise_product()`, `ft_feature_hasher()`, `ft_hashing_tf()`, `ft_idf()`, `ft_imputer()`, `ft_index_to_string()`, `ft_interaction()`, `ft_lsh`, `ft_max_abs_scaler()`, `ft_min_max_scaler()`, `ft_ngram()`, `ft_normalizer()`, `ft_one_hot_encoder_estimator()`, `ft_one_hot_encoder()`, `ft_polynomial_expansion()`, `ft_quantile_discretizer()`, `ft_r_formula()`, `ft_regex_tokenizer()`, `ft_robust_scaler()`, `ft_sql_transformer()`, `ft_standard_scaler()`, `ft_stop_words_remover()`, `ft_string_indexer()`, `ft_tokenizer()`, `ft_vector_assembler()`, `ft_vector_indexer()`, `ft_vector_slicer()`, `ft_word2vec()` \n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}