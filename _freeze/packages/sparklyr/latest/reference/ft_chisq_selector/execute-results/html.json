{
  "hash": "bc40c9ad1ac35f10bc9d525d6ac3cb8b",
  "result": {
    "markdown": "---\ntitle: \"Feature Transformation -- ChiSqSelector (Estimator)\"\nexecute:\n  freeze: true\n---\n\n\n\n\n*R/ml_feature_chisq_selector.R*\n\n## ft_chisq_selector\n\n## Description\nChi-Squared feature selection, which selects categorical features to use for predicting a categorical label \n\n\n## Usage\n```r\nft_chisq_selector( \n  x, \n  features_col = \"features\", \n  output_col = NULL, \n  label_col = \"label\", \n  selector_type = \"numTopFeatures\", \n  fdr = 0.05, \n  fpr = 0.05, \n  fwe = 0.05, \n  num_top_features = 50, \n  percentile = 0.1, \n  uid = random_string(\"chisq_selector_\"), \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| output_col | The name of the output column. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| selector_type | (Spark 2.1.0+) The selector type of the ChisqSelector. Supported options: \"numTopFeatures\" (default), \"percentile\", \"fpr\", \"fdr\", \"fwe\". |\n| fdr | (Spark 2.2.0+) The upper bound of the expected false discovery rate. Only applicable when selector_type = \"fdr\". Default value is 0.05. |\n| fpr | (Spark 2.1.0+) The highest p-value for features to be kept. Only applicable when selector_type= \"fpr\". Default value is 0.05. |\n| fwe | (Spark 2.2.0+) The upper bound of the expected family-wise error rate. Only applicable when selector_type = \"fwe\". Default value is 0.05. |\n| num_top_features | Number of features that selector will select, ordered by ascending p-value. If the number of features is less than `num_top_features`, then this will select all features. Only applicable when selector_type = \"numTopFeatures\". The default value of `num_top_features` is 50. |\n| percentile | (Spark 2.1.0+) Percentile of features that selector will select, ordered by statistics value descending. Only applicable when selector_type = \"percentile\". Default value is 0.1. |\n| uid | A character string used to uniquely identify the feature transformer. |\n| ... | Optional arguments; currently unused. |\n\n## Details\n\nIn the case where `x` is a `tbl_spark`, the estimator fits against `x`\n\n  to obtain a transformer, which is then immediately used to transform `x`, returning a `tbl_spark`. \n\n\n## Value\n\nThe object returned depends on the class of `x`. \n\n  \n\n- `spark_connection`: When `x` is a `spark_connection`, the function returns a `ml_transformer`,   a `ml_estimator`, or one of their subclasses. The object contains a pointer to   a Spark `Transformer` or `Estimator` object and can be used to compose   `Pipeline` objects. \n\n  \n\n- `ml_pipeline`: When `x` is a `ml_pipeline`, the function returns a `ml_pipeline` with   the transformer or estimator appended to the pipeline. \n\n  \n\n- `tbl_spark`: When `x` is a `tbl_spark`, a transformer is constructed then   immediately applied to the input `tbl_spark`, returning a `tbl_spark`\n\n\n\n## See Also\n\nSee [https://spark.apache.org/docs/latest/ml-features.html](https://spark.apache.org/docs/latest/ml-features.html) for   more information on the set of transformations available for DataFrame   columns in Spark. \n\nOther feature transformers:  `ft_binarizer()`, `ft_bucketizer()`, `ft_count_vectorizer()`, `ft_dct()`, `ft_elementwise_product()`, `ft_feature_hasher()`, `ft_hashing_tf()`, `ft_idf()`, `ft_imputer()`, `ft_index_to_string()`, `ft_interaction()`, `ft_lsh`, `ft_max_abs_scaler()`, `ft_min_max_scaler()`, `ft_ngram()`, `ft_normalizer()`, `ft_one_hot_encoder_estimator()`, `ft_one_hot_encoder()`, `ft_pca()`, `ft_polynomial_expansion()`, `ft_quantile_discretizer()`, `ft_r_formula()`, `ft_regex_tokenizer()`, `ft_robust_scaler()`, `ft_sql_transformer()`, `ft_standard_scaler()`, `ft_stop_words_remover()`, `ft_string_indexer()`, `ft_tokenizer()`, `ft_vector_assembler()`, `ft_vector_indexer()`, `ft_vector_slicer()`, `ft_word2vec()`\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}