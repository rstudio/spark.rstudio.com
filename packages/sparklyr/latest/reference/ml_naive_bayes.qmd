---
title: "Spark ML -- Naive-Bayes"
execute:
  freeze: true
---

```{r, eval=ecodown::examples_not_run()}
#| include: false
options("pillar.width" = 60)
library(sparklyr) 
library(dplyr)
```

*R/ml_classification_naive_bayes.R*

## ml_naive_bayes

## Description
 Naive Bayes Classifiers. It supports Multinomial NB (see [here](https://nlp.stanford.edu/IR-book/html/htmledition/naive-bayes-text-classification-1.html)) which can handle finitely supported discrete data. For example, by converting documents into TF-IDF vectors, it can be used for document classification. By making every vector a binary (0/1) data, it can also be used as Bernoulli NB (see [here](http://nlp.stanford.edu/IR-book/html/htmledition/the-bernoulli-model-1.html)). The input feature values must be nonnegative. 


## Usage
```r
 
ml_naive_bayes( 
  x, 
  formula = NULL, 
  model_type = "multinomial", 
  smoothing = 1, 
  thresholds = NULL, 
  weight_col = NULL, 
  features_col = "features", 
  label_col = "label", 
  prediction_col = "prediction", 
  probability_col = "probability", 
  raw_prediction_col = "rawPrediction", 
  uid = random_string("naive_bayes_"), 
  ... 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |
| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |
| model_type | The model type. Supported options: `"multinomial"` and `"bernoulli"`. (default = `multinomial`) |
| smoothing | The (Laplace) smoothing parameter. Defaults to 1. |
| thresholds | Thresholds in multi-class classification to adjust the probability of predicting each class. Array must have length equal to the number of classes, with values > 0 excepting that at most one value may be 0. The class with largest value `p/t` is predicted, where `p` is the original probability of that class and `t` is the class's threshold. |
| weight_col | (Spark 2.1.0+) Weight column name. If this is not set or empty, we treat all instance weights as 1.0. |
| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |
| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |
| prediction_col | Prediction column name. |
| probability_col | Column name for predicted class conditional probabilities. |
| raw_prediction_col | Raw prediction (a.k.a. confidence) column name. |
| uid | A character string used to uniquely identify the ML estimator. |
| ... | Optional arguments; see Details. |



## Value
 The object returned depends on the class of `x`. If it is a `spark_connection`, the function returns a `ml_estimator` object. If it is a `ml_pipeline`, it will return a pipeline with the predictor appended to it. If a `tbl_spark`, it will return a `tbl_spark` with the predictions added to it. 


## Examples
```{r, eval=ecodown::examples_not_run()}
library(sparklyr)
 
sc <- spark_connect(master = "local") 
iris_tbl <- sdf_copy_to(sc, iris, name = "iris_tbl", overwrite = TRUE) 
 
partitions <- iris_tbl %>% 
  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) 
 
iris_training <- partitions$training 
iris_test <- partitions$test 
 
nb_model <- iris_training %>% 
  ml_naive_bayes(Species ~ .) 
 
pred <- ml_predict(nb_model, iris_test) 
 
ml_multiclass_classification_evaluator(pred) 
 
 
```

## See Also
 Other ml algorithms:  `ml_aft_survival_regression()`, `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()` 


```{r, eval=ecodown::examples_not_run()}
#| include: false
spark_disconnect_all()
```
