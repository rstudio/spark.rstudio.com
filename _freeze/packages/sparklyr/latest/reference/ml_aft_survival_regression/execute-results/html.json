{
  "hash": "63f724450b8d6c5f7c53f0d052b00e7e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Spark ML -- Survival Regression\"\nexecute:\n  freeze: true\n---\n\n\n\n*R/ml_regression_aft_survival_regression.R*\n\n## ml_aft_survival_regression\n\n## Description\n Fit a parametric survival regression model named accelerated failure time (AFT) model (see [Accelerated failure time model (Wikipedia)](https://en.wikipedia.org/wiki/Accelerated_failure_time_model)) based on the Weibull distribution of the survival time. \n\n\n## Usage\n```r\n \nml_aft_survival_regression( \n  x, \n  formula = NULL, \n  censor_col = \"censor\", \n  quantile_probabilities = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99), \n  fit_intercept = TRUE, \n  max_iter = 100L, \n  tol = 1e-06, \n  aggregation_depth = 2, \n  quantiles_col = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  uid = random_string(\"aft_survival_regression_\"), \n  ... \n) \n \nml_survival_regression( \n  x, \n  formula = NULL, \n  censor_col = \"censor\", \n  quantile_probabilities = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99), \n  fit_intercept = TRUE, \n  max_iter = 100L, \n  tol = 1e-06, \n  aggregation_depth = 2, \n  quantiles_col = NULL, \n  features_col = \"features\", \n  label_col = \"label\", \n  prediction_col = \"prediction\", \n  uid = random_string(\"aft_survival_regression_\"), \n  response = NULL, \n  features = NULL, \n  ... \n) \n```\n\n## Arguments\n|Arguments|Description|\n|---|---|\n| x | A `spark_connection`, `ml_pipeline`, or a `tbl_spark`. |\n| formula | Used when `x` is a `tbl_spark`. R formula as a character string or a formula. This is used to transform the input dataframe before fitting, see ft_r_formula for details. |\n| censor_col | Censor column name. The value of this column could be 0 or 1. If the value is 1, it means the event has occurred i.e. uncensored; otherwise censored. |\n| quantile_probabilities | Quantile probabilities array. Values of the quantile probabilities array should be in the range (0, 1) and the array should be non-empty. |\n| fit_intercept | Boolean; should the model be fit with an intercept term? |\n| max_iter | The maximum number of iterations to use. |\n| tol | Param for the convergence tolerance for iterative algorithms. |\n| aggregation_depth | (Spark 2.1.0+) Suggested depth for treeAggregate (>= 2). |\n| quantiles_col | Quantiles column name. This column will output quantiles of corresponding quantileProbabilities if it is set. |\n| features_col | Features column name, as a length-one character vector. The column should be single vector column of numeric values. Usually this column is output by `ft_r_formula`. |\n| label_col | Label column name. The column should be a numeric column. Usually this column is output by `ft_r_formula`. |\n| prediction_col | Prediction column name. |\n| uid | A character string used to uniquely identify the ML estimator. |\n| ... | Optional arguments; see Details. |\n| response | (Deprecated) The name of the response column (as a length-one character vector.) |\n| features | (Deprecated) The name of features (terms) to use for the model fit. |\n\n## Details\n `ml_survival_regression()` is an alias for `ml_aft_survival_regression()` for backwards compatibility. \n\n\n## Value\n The object returned depends on the class of `x`. If it is a `spark_connection`, the function returns a `ml_estimator` object. If it is a `ml_pipeline`, it will return a pipeline with the predictor appended to it. If a `tbl_spark`, it will return a `tbl_spark` with the predictions added to it. \n\n\n## Examples\n\n::: {.cell}\n\n```{.r .cell-code}\n \n \nlibrary(survival) \nlibrary(sparklyr) \n \nsc <- spark_connect(master = \"local\") \novarian_tbl <- sdf_copy_to(sc, ovarian, name = \"ovarian_tbl\", overwrite = TRUE) \n \npartitions <- ovarian_tbl %>% \n  sdf_random_split(training = 0.7, test = 0.3, seed = 1111) \n \novarian_training <- partitions$training \novarian_test <- partitions$test \n \nsur_reg <- ovarian_training %>% \n  ml_aft_survival_regression(futime ~ ecog_ps + rx + age + resid_ds, censor_col = \"fustat\") \n \npred <- ml_predict(sur_reg, ovarian_test) \npred \n \n \n```\n:::\n\n\n## See Also\n Other ml algorithms:  `ml_decision_tree_classifier()`, `ml_gbt_classifier()`, `ml_generalized_linear_regression()`, `ml_isotonic_regression()`, `ml_linear_regression()`, `ml_linear_svc()`, `ml_logistic_regression()`, `ml_multilayer_perceptron_classifier()`, `ml_naive_bayes()`, `ml_one_vs_rest()`, `ml_random_forest_classifier()` \n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}