---
title: "Write Console Stream"
execute:
  freeze: true
---

*R/stream_data.R*

## stream_write_console

## Description
Writes a Spark dataframe stream into console logs. 


## Usage
```r
stream_write_console( 
  x, 
  mode = c("append", "complete", "update"), 
  options = list(), 
  trigger = stream_trigger_interval(), 
  partition_by = NULL, 
  ... 
) 
```

## Arguments
|Arguments|Description|
|---|---|
| x | A Spark DataFrame or dplyr operation |
| mode | Specifies how data is written to a streaming sink. Valid values are `"append"`, `"complete"` or `"update"`. |
| options | A list of strings with additional options. |
| trigger | The trigger for the stream query, defaults to micro-batches runnnig every 5 seconds. See `stream_trigger_interval` and `stream_trigger_continuous`. |
| partition_by | Partitions the output by the given list of columns. |
| ... | Optional arguments; currently unused. |





## Examples
```{r, eval=ecodown::examples_not_run()}
library(sparklyr)
sc <- spark_connect(master = "local") 
sdf_len(sc, 10) %>% 
  dplyr::transmute(text = as.character(id)) %>% 
  spark_write_text("text-in") 
stream <- stream_read_text(sc, "text-in") %>% stream_write_console() 
stream_stop(stream) 
```

## See Also
Other Spark stream serialization:  `stream_read_csv()`, `stream_read_delta()`, `stream_read_json()`, `stream_read_kafka()`, `stream_read_orc()`, `stream_read_parquet()`, `stream_read_socket()`, `stream_read_text()`, `stream_write_csv()`, `stream_write_delta()`, `stream_write_json()`, `stream_write_kafka()`, `stream_write_memory()`, `stream_write_orc()`, `stream_write_parquet()`, `stream_write_text()`

